<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>卷积神经网络</title>
    <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="1-卷积神经网络结构"><a href="#1-卷积神经网络结构" class="headerlink" title="1.卷积神经网络结构"></a>1.卷积神经网络结构</h2><p><img style="float: center;" src="/机器学习/卷积神经网络/卷积神经网络结构.png" width="70%"></p>
<ul>
<li><strong>输入层</strong>：将每个像素代表一个特征节点输入到网络中。</li>
<li><strong>卷积层</strong>：卷积运算的主要目的是使原信号特征增强，并降低噪音。</li>
<li><strong>降采样层</strong>：降低网络训练参数及模型的过拟合程度。</li>
<li><strong>全连接层</strong>：对生成的特征进行加权。</li>
</ul>
<h2 id="2-卷积运算"><a href="#2-卷积运算" class="headerlink" title="2.卷积运算"></a>2.卷积运算</h2><ul>
<li>1.<strong>求点积</strong>：将5×5输入矩阵中3×3深蓝色区域中每个元素分别与其对应位置的权值（红色数字）相乘，然后再相加，所得到的值作为3×3输出矩阵（绿色）的第一个元素。  </li>
<li>2.<strong>滑动窗口</strong>：将3×3权值矩阵向右移动一个格（即，步长为1）。  </li>
<li>3.<strong>重复操作</strong>：同样地，将此时深色区域内每个元素分别与对应的权值相乘然后再相加，所得到的值作为输出矩阵的第二个元素；重复上述“求点积-滑动窗口”操作，直至输出矩阵所有值被填满。</li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/卷积操作.png" width="60%"></p>
<p><strong>注意点</strong>：</p>
<ul>
<li>卷积核在2 维输入数据上“滑动”，对当前输入部分的元素进行矩阵乘法，然后将结果汇为单个输出像素值，重复这个过程直到遍历整张图像，这个过程就叫做卷积  </li>
<li>这个权值矩阵就是<strong>卷积核</strong>  </li>
<li>卷积操作后的图像称为<strong>特征图</strong>（feature map）</li>
</ul>
<h2 id="3-全连接层和卷积层对比"><a href="#3-全连接层和卷积层对比" class="headerlink" title="3.全连接层和卷积层对比"></a>3.全连接层和卷积层对比</h2><p><img style="float: center;" src="/机器学习/卷积神经网络/全连接层和卷积层对比.png" width="60%"></p>
<h2 id="4-卷积的作用"><a href="#4-卷积的作用" class="headerlink" title="4.卷积的作用"></a>4.卷积的作用</h2><ul>
<li>卷积运算的主要目的是<strong>使原信号特征增强，并降低噪音</strong>。  </li>
<li>对图像用一个卷积核进行卷积运算，实际上是一个滤波的过程。每个卷积核都是一种特征提取方式，就像是一个筛子，将图像中符合条件的部分筛选出来。  </li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/卷积示意图.png" width="50%"></p>
<h2 id="5-填充（Padding）"><a href="#5-填充（Padding）" class="headerlink" title="5.填充（Padding）"></a>5.填充（Padding）</h2><p>在卷积核滑动过程中图像边缘会被裁剪掉，将5×5的特征矩阵转换为3×3的特征矩阵。<br><strong>填充</strong>：用额外的“假”像素（通常值为0）填充边缘。这样，在滑动时的卷积核可以允许原始边缘像素位于卷积核的中心，同时延伸到边缘之外的假像素，从而产生与输入（5×5蓝色）相同大小的输出（5×5绿色）。  </p>
<p><img style="float: center;" src="/机器学习/卷积神经网络/填充.png" width="20%"></p>
<h2 id="6-多通道卷积"><a href="#6-多通道卷积" class="headerlink" title="6.多通道卷积"></a>6.多通道卷积</h2><ul>
<li>每个卷积核都会将图像生成为另一幅特征映射图，即：<strong>一个卷积核提取一种特征</strong>。  </li>
<li>为了使特征提取更充分，可以添加多个卷积核以提取不同的特征，也就是，<strong>多通道卷积</strong>。  </li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/特征筛选.png" width="20%"></p>
<p><img style="float: center;" src="/机器学习/卷积神经网络/desktop/研究周报/机器学习/卷积神经网络/img/多通道卷积.png" width="40%"></p>
<h2 id="7-池化（pooling）"><a href="#7-池化（pooling）" class="headerlink" title="7.池化（pooling）"></a>7.池化（pooling）</h2><p><strong>池化</strong>：计算图像一个区域上的某个特定特征的平均值或最大值的聚合操作。<br>卷积层的作用是探测上一层特征的局部连接，而池化的作用是<strong>在语义上将相似的特征合并起来</strong>，从而达到降维的目的。  </p>
<p><strong>常用池化方法</strong></p>
<ul>
<li>1.<strong>均值池化</strong>：对池化区域内的像素点取均值，这种方法得到的特征数据对背景信息更敏感。  </li>
<li>2.<strong>最大池化</strong>：对池化区域内所有像素点取最大值，这种方法得到的特征对纹理特征信息更加敏感。</li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/最大池化.png" width="40%"></p>
<h2 id="8-步长（stride）"><a href="#8-步长（stride）" class="headerlink" title="8.步长（stride）"></a>8.步长（stride）</h2><p><strong>步长</strong>：卷积核在图片上移动的格数。  </p>
<ul>
<li>stride=1：</li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/stride1.png" width="50%"></p>
<ul>
<li>stride=2:</li>
</ul>
<p><img style="float: center;" src="/机器学习/卷积神经网络/stride2.png" width="50%"></p>
<p>步长大于1的卷积操作也是<strong>降维的一种方式</strong>。<br>卷积后图片尺寸：假如步长为S，原始图片尺寸为$[N_1,N_1]$，卷积核大小为$[N_2,N_2]$，那么<strong>卷积之后图像大小</strong>：<br>$[\frac{N_1-N_2}{S}+1,\frac{N_1-N_2}{S}+1]$</p>
<h2 id="9-卷积神经网络组成小结"><a href="#9-卷积神经网络组成小结" class="headerlink" title="9.卷积神经网络组成小结"></a>9.卷积神经网络组成小结</h2><p><img style="float: center;" src="/机器学习/卷积神经网络/卷积神经网络组成.png" width="50%"></p>
<p>正则表达式：<br>输入层→(卷积层+→池化层?)+→全连接层+<br>含义：<strong>输入层</strong>→(<strong>卷积层</strong>[一层或多层]+<strong>池化层</strong>[0或1层])[一个或多个]→<strong>全连接层</strong>[一个或多个]</p>
<h2 id="10-Tensorflow实践"><a href="#10-Tensorflow实践" class="headerlink" title="10.Tensorflow实践"></a>10.Tensorflow实践</h2><p>CIFAR10 数据集</p>
<p><img src="/机器学习/卷积神经网络/desktop\9.卷积神经网络\img\CIFAR10.png" alt="CIFAR10" style="zoom:60%;"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> p</span><br><span class="line">%load_ext tensorboard</span><br></pre></td></tr></table></figure>
<h3 id="9-1-导入CIFAR数据集"><a href="#9-1-导入CIFAR数据集" class="headerlink" title="9.1 导入CIFAR数据集"></a>9.1 导入CIFAR数据集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(Xtrain,Ytrain),(Xtest,Ytest) = tf.keras.datasets.cifar10.load_data()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看训练和测试数据集大小</span></span><br><span class="line">print(<span class="string">"Xtrain's shape:"</span>,Xtrain.shape)</span><br><span class="line">print(<span class="string">"Ytrain's shape:"</span>,Ytrain.shape)</span><br><span class="line">print(<span class="string">"Xtest's shape:"</span>,Xtest.shape)</span><br><span class="line">print(<span class="string">"Ytest's shape:"</span>,Ytest.shape)</span><br></pre></td></tr></table></figure>
<pre><code>Xtrain&#39;s shape: (50000, 32, 32, 3)
Ytrain&#39;s shape: (50000, 1)
Xtest&#39;s shape: (10000, 32, 32, 3)
Ytest&#39;s shape: (10000, 1)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看图像数据和标签</span></span><br><span class="line">label_dict = &#123;<span class="number">0</span>:<span class="string">'T-shirt/top'</span>,<span class="number">1</span>:<span class="string">'Trouser'</span>,<span class="number">2</span>:<span class="string">'Pullover'</span>,<span class="number">3</span>:<span class="string">'Dress'</span>,<span class="number">4</span>:<span class="string">'Coat'</span>,</span><br><span class="line">             <span class="number">5</span>:<span class="string">'Sandal'</span>,<span class="number">6</span>:<span class="string">'Shirt'</span>,<span class="number">7</span>:<span class="string">'Sneaker'</span>,<span class="number">8</span>:<span class="string">'Bag'</span>,<span class="number">9</span>:<span class="string">'Ankle boot'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_images_labels</span><span class="params">(images,labels,prediction,idx,num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">    labels = np.array(labels)</span><br><span class="line">    <span class="keyword">if</span> num&gt;<span class="number">10</span>:</span><br><span class="line">        num=<span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        plt.subplot(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>+i)</span><br><span class="line">        plt.imshow(images[idx],cmap=<span class="string">'binary'</span>)</span><br><span class="line">        title=str(i+<span class="number">1</span>)+<span class="string">'.'</span>+label_dict[labels[idx,<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">if</span> len(prediction)&gt;<span class="number">0</span>:</span><br><span class="line">            title+=<span class="string">'=&gt;'</span>+label_dict[prediction[idx]]</span><br><span class="line">        plt.title(title,fontsize=<span class="number">10</span>)</span><br><span class="line">        idx+=<span class="number">1</span></span><br><span class="line">plot_images_labels(Xtest,Ytest,[],<span class="number">10</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/机器学习/卷积神经网络/output_16_0.png" alt="png"></p>
<h3 id="9-2-数据预处理"><a href="#9-2-数据预处理" class="headerlink" title="9.2 数据预处理"></a>9.2 数据预处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图像数据数字标准化</span></span><br><span class="line">Xtrain_norm = Xtrain.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br><span class="line">Xtest_norm = Xtest.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 独热编码</span></span><br><span class="line"><span class="comment"># Ytrain_onehot = tf.one_hot(Ytrain,depth=10)</span></span><br><span class="line"><span class="comment"># Ytest_onehot = tf.one_hot(Ytest,depth=10)</span></span><br></pre></td></tr></table></figure>
<h3 id="9-3-建立模型"><a href="#9-3-建立模型" class="headerlink" title="9.3 建立模型"></a>9.3 建立模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(tf.keras.layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>)))</span><br><span class="line">model.add(tf.keras.layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(tf.keras.layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(tf.keras.layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(tf.keras.layers.Flatten())</span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<pre><code>Model: &quot;sequential_18&quot;
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_35 (Conv2D)           (None, 30, 30, 32)        896       
_________________________________________________________________
max_pooling2d_12 (MaxPooling (None, 15, 15, 32)        0         
_________________________________________________________________
conv2d_36 (Conv2D)           (None, 13, 13, 64)        18496     
_________________________________________________________________
max_pooling2d_13 (MaxPooling (None, 6, 6, 64)          0         
_________________________________________________________________
conv2d_37 (Conv2D)           (None, 4, 4, 64)          36928     
_________________________________________________________________
flatten_12 (Flatten)         (None, 1024)              0         
_________________________________________________________________
dense_22 (Dense)             (None, 64)                65600     
_________________________________________________________________
dense_23 (Dense)             (None, 10)                650       
=================================================================
Total params: 122,570
Trainable params: 122,570
Non-trainable params: 0
_________________________________________________________________
</code></pre><h3 id="9-4-编译模型"><a href="#9-4-编译模型" class="headerlink" title="9.4 编译模型"></a>9.4 编译模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模型编译</span></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">             loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">             metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">log_dir = <span class="string">"F:\\JupyterNotebook\\TensorFlowLearn\\logs\\"</span> + datetime.datetime.now().strftime(<span class="string">"%Y%m%d-%H%M%S"</span>)</span><br><span class="line">tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="9-5-训练模型"><a href="#9-5-训练模型" class="headerlink" title="9.5 训练模型"></a>9.5 训练模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">his = model.fit(Xtrain_norm,Ytrain,epochs=<span class="number">5</span>,validation_data=(Xtest_norm,Ytest),callbacks=[tensorboard_callback])</span><br></pre></td></tr></table></figure>
<pre><code>Train on 50000 samples, validate on 10000 samples
Epoch 1/5
   32/50000 [..............................] - ETA: 8:18 - loss: 2.3121 - accuracy: 0.0312WARNING:tensorflow:Method (on_train_batch_end) is slow compared to the batch update (0.103193). Check your callbacks.
50000/50000 [==============================] - 23s 452us/sample - loss: 1.5411 - accuracy: 0.4347 - val_loss: 1.2904 - val_accuracy: 0.5303
Epoch 2/5
50000/50000 [==============================] - 22s 440us/sample - loss: 1.1496 - accuracy: 0.5928 - val_loss: 1.1249 - val_accuracy: 0.6020
Epoch 3/5
50000/50000 [==============================] - 22s 449us/sample - loss: 0.9963 - accuracy: 0.6501 - val_loss: 0.9654 - val_accuracy: 0.6617
Epoch 4/5
50000/50000 [==============================] - 23s 455us/sample - loss: 0.8942 - accuracy: 0.6858 - val_loss: 0.9129 - val_accuracy: 0.6794
Epoch 5/5
50000/50000 [==============================] - 23s 455us/sample - loss: 0.8187 - accuracy: 0.7118 - val_loss: 0.9052 - val_accuracy: 0.6840
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">his.history.keys()</span><br></pre></td></tr></table></figure>
<pre><code>dict_keys([&#39;loss&#39;, &#39;accuracy&#39;, &#39;val_loss&#39;, &#39;val_accuracy&#39;])
</code></pre><h3 id="9-6-训练结果"><a href="#9-6-训练结果" class="headerlink" title="9.6 训练结果"></a>9.6 训练结果</h3><p>模型训练后的准确率为<strong>68.4%</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(his.epoch,his.history.get(<span class="string">'loss'</span>),label=<span class="string">'trainset_loss'</span>)</span><br><span class="line">plt.plot(his.epoch,his.history.get(<span class="string">'val_loss'</span>),label=<span class="string">'testset_loss'</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/机器学习/卷积神经网络/output_26_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(his.epoch,his.history.get(<span class="string">'accuracy'</span>),label=<span class="string">'trainset_accuracy'</span>)</span><br><span class="line">plt.plot(his.epoch,his.history.get(<span class="string">'val_accuracy'</span>),label=<span class="string">'testset_accuracy'</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/机器学习/卷积神经网络/output_27_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prediction = model.predict(Xtest_norm)</span><br><span class="line">prediction = np.argmax(prediction,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_images_labels(Xtest,Ytest,prediction,<span class="number">10</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/机器学习/卷积神经网络/output_29_0.png" alt="png"></p>
<p>可见第1和第6幅图预测错误，本次训练只进行了5轮，仍有比较大的改进空间。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>卷积神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap学习笔记</title>
    <url>/%E5%89%8D%E7%AB%AF/Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.bootcss.com/" target="_blank" rel="noopener">官网</a></p>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>一个前端开发的<strong>框架</strong>，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 基于 HTML、CSS、JavaScript ，简洁灵活，使得 Web 开发更加快捷。</p>
<p><strong>响应式布局</strong>：同一套页面可以兼容不同分辨率的设备。</p>
<h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h2><ul>
<li>1.下载 Bootstrap。</li>
<li>2.在项目中将三个文件夹复制。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootstrap/</span><br><span class="line">├── css/</span><br><span class="line">│   ├── bootstrap.css</span><br><span class="line">│   ├── bootstrap.css.map</span><br><span class="line">│   ├── bootstrap.min.css</span><br><span class="line">│   ├── bootstrap.min.css.map</span><br><span class="line">│   ├── bootstrap-theme.css</span><br><span class="line">│   ├── bootstrap-theme.css.map</span><br><span class="line">│   ├── bootstrap-theme.min.css</span><br><span class="line">│   └── bootstrap-theme.min.css.map</span><br><span class="line">├── js/</span><br><span class="line">│   ├── bootstrap.js</span><br><span class="line">│   └── bootstrap.min.js</span><br><span class="line">└── fonts/</span><br><span class="line">    ├── glyphicons-halflings-regular.eot</span><br><span class="line">    ├── glyphicons-halflings-regular.svg</span><br><span class="line">    ├── glyphicons-halflings-regular.ttf</span><br><span class="line">    ├── glyphicons-halflings-regular.woff</span><br><span class="line">    └── glyphicons-halflings-regular.woff2</span><br></pre></td></tr></table></figure>
<ul>
<li>3.创建html页面，引入必要的资源文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-响应式布局"><a href="#3-响应式布局" class="headerlink" title="3.响应式布局"></a>3.响应式布局</h2><p>同一套页面可以兼容<strong>不同分辨率</strong>的设备。</p>
<p>实现：依赖于<strong>栅格系统</strong>：将一行平均分成12个格子，可以指定元素占几个格子。</p>
<p>步骤：</p>
<ul>
<li>定义容器，相当于 table。<ul>
<li>容器分类：<ul>
<li>container：两边留白。</li>
<li>container-fluid：每一种设备都是100%宽度。</li>
</ul>
</li>
</ul>
</li>
<li>定义行，相当于 tr 。  样式：row</li>
<li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目。<ul>
<li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li>
<li>sm：小屏幕 平板 (≥768px)</li>
<li>md：中等屏幕 桌面显示器 (≥992px)</li>
<li>lg：大屏幕 大桌面显示器 (≥1200px)</li>
</ul>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>一行中如果格子数目超过12，则超出部分自动换行。</li>
<li>栅格类属性可以<strong>向上兼容</strong>。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li>
<li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li>
</ul>
<h2 id="4-CSS-样式和-JS-插件"><a href="#4-CSS-样式和-JS-插件" class="headerlink" title="4. CSS 样式和 JS 插件"></a>4. CSS 样式和 JS 插件</h2><h3 id="4-1-全局-CSS-样式"><a href="#4-1-全局-CSS-样式" class="headerlink" title="4.1 全局 CSS 样式"></a>4.1 全局 CSS 样式</h3><p><strong>按钮</strong>：class=”btn btn-default”</p>
<p><strong>图片</strong>：</p>
<ul>
<li>class=”img-responsive”：图片在任意尺寸都占100%。</li>
<li><p>图片形状：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span>：方形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span> ： 圆形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span> ：相框</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>表格</strong></p>
<ul>
<li>table</li>
<li>table-bordered</li>
<li>table-hover</li>
</ul>
<p><strong>表单</strong></p>
<ul>
<li>给表单项添加：class=”form-control” </li>
</ul>
<h3 id="4-2-组件"><a href="#4-2-组件" class="headerlink" title="4.2 组件"></a><strong>4.2 组件</strong></h3><ul>
<li>导航条</li>
<li>分页条</li>
</ul>
<h3 id="4-3-插件"><a href="#4-3-插件" class="headerlink" title="4.3 插件"></a><strong>4.3 插件</strong></h3><ul>
<li>轮播图 Carousel </li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习笔记</title>
    <url>/Java/JavaWeb/JSP/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java Server Pages： Java 服务器端页面。</p>
<ul>
<li>可理解为：一个特殊的页面，其中既可定义html标签，又可定义 Java 代码。</li>
<li>用于<strong>简化书写</strong>。</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JSP 本质上就是一个 <strong>Servlet</strong>。</p>
<h2 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h2><p>JSP 定义 Java 代码的方式：</p>
<ul>
<li>1.&lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li>
<li>2.&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</li>
<li>3.&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>会话技术Cookie&amp;Session</title>
    <url>/Java/JavaWeb/HTTP/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AFCookie-Session/</url>
    <content><![CDATA[<h2 id="1-会话技术"><a href="#1-会话技术" class="headerlink" title="1.会话技术"></a>1.会话技术</h2><p><strong>会话</strong>：一次会话中包含多次请求和响应。</p>
<ul>
<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。</li>
</ul>
<p><strong>功能</strong>：在一次会话的范围内的多次请求间，共享数据。</p>
<p><strong>方式</strong>：</p>
<ul>
<li>客户端会话技术：<strong>Cookie</strong></li>
<li>服务器端会话技术：<strong>Session</strong></li>
</ul>
<h2 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2.Cookie"></a>2.Cookie</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>客户端会话技术，将数据保存到客户端。</p>
<h3 id="2-2-使用步骤"><a href="#2-2-使用步骤" class="headerlink" title="2.2 使用步骤"></a>2.2 使用步骤</h3><ul>
<li><p>创建Cookie对象，绑定数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Cookie(String name, String value)</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送Cookie对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(Cookie cookie)</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Cookie，拿到数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[]  request.getCookies()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-实现原理"><a href="#2-3-实现原理" class="headerlink" title="2.3 实现原理"></a>2.3 实现原理</h3><p>基于响应头 set-cookie 和请求头 cookie 实现</p>
<h3 id="2-4-cookie-的细节"><a href="#2-4-cookie-的细节" class="headerlink" title="2.4 cookie 的细节"></a>2.4 cookie 的细节</h3><h4 id="1-一次发送多个-cookie"><a href="#1-一次发送多个-cookie" class="headerlink" title="1.一次发送多个 cookie"></a>1.一次发送多个 cookie</h4><ul>
<li>可以创建多个 Cookie 对象，使用response调用多次 addCookie 方法发送 cookie 即可。</li>
</ul>
<h4 id="2-cookie-在浏览器中保存多长时间"><a href="#2-cookie-在浏览器中保存多长时间" class="headerlink" title="2.cookie 在浏览器中保存多长时间"></a>2.cookie 在浏览器中保存多长时间</h4><ul>
<li>默认情况下，当浏览器关闭后，Cookie 数据被销毁。</li>
<li><strong>持久化存储</strong>：setMaxAge(int seconds)<ul>
<li>正数：将 Cookie 数据写到硬盘的文件中。持久化存储。并指定 cookie 存活时间，时间到后，cookie 文件自动失效。</li>
<li>负数：默认值。</li>
<li>零：删除cookie信息。</li>
</ul>
</li>
</ul>
<h4 id="3-cookie-能不能存中文"><a href="#3-cookie-能不能存中文" class="headerlink" title="3.cookie 能不能存中文"></a>3.cookie 能不能存中文</h4><ul>
<li>在 tomcat 8 之前，cookie中不能直接存储中文数据。<ul>
<li>需要将中文数据转码—-一般采用URL编码(%E3)。</li>
</ul>
</li>
<li>在 tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析。</li>
</ul>
<h4 id="4-cookie-共享问题"><a href="#4-cookie-共享问题" class="headerlink" title="4.cookie 共享问题"></a>4.cookie 共享问题</h4><ul>
<li>假设在一个 tomcat 服务器中，部署了多个 web 项目，那么在这些 web 项目中 cookie 能不能共享？<ul>
<li>默认情况下 cookie 不能共享。</li>
<li>setPath(String path)：设置 cookie 的获取范围。默认情况下，设置当前的虚拟目录。如果要共享，则可以将 path 设置为”/“。</li>
</ul>
</li>
<li>不同的 tomcat 服务器间 cookie 共享问题？<ul>
<li>setDomain(String path)：如果设置一级域名相同，那么多个服务器之间cookie可以共享。<br>setDomain(“.baidu.com”)，那么 tieba.baidu.com 和 news.baidu.com 中 cookie 可以共享。</li>
</ul>
</li>
</ul>
<h4 id="5-Cookie的特点和作用"><a href="#5-Cookie的特点和作用" class="headerlink" title="5.Cookie的特点和作用"></a>5.Cookie的特点和作用</h4><ul>
<li>特点：<ul>
<li>cookie 存储数据在客户端浏览器。</li>
<li>浏览器对于单个 cookie 的大小有限制(4kb) 以及对同一个域名下的总 cookie 数量也有限制(20个)。</li>
</ul>
</li>
<li>作用：<ul>
<li>cookie 一般用于存出少量的不太敏感的数据。</li>
<li>在不登录的情况下，完成服务器对客户端的身份识别。</li>
</ul>
</li>
</ul>
<h4 id="6-案例：记住上一次访问时间"><a href="#6-案例：记住上一次访问时间" class="headerlink" title="6.案例：记住上一次访问时间"></a>6.案例：记住上一次访问时间</h4><p><strong>需求</strong>：</p>
<ul>
<li>访问一个 Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li>
<li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串。</li>
</ul>
<p><strong>分析</strong>：</p>
<ul>
<li>可以采用 Cookie 来完成。</li>
<li>在服务器中的 Servlet 判断是否有一个名为 lastTime 的cookie：<ul>
<li>有：不是第一次访问<ul>
<li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li>
<li>写回 Cookie：lastTime=2018年6月10日11:50:01</li>
</ul>
</li>
<li>没有：是第一次访问<ul>
<li>响应数据：您好，欢迎您首次访问</li>
<li>写回 Cookie：lastTime=2018年6月10日11:50:01</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>HTTP</tag>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP学习笔记</title>
    <url>/Java/JavaWeb/HTTP/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p><strong>概念</strong>：Hyper Text Transfer Protocol 超文本传输协议。</p>
<p><strong>传输协议</strong>：定义了客户端和服务器端通信时，发送数据的格式。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>基于 TCP/IP 的高级协议。</li>
<li>默认端口号：80。</li>
<li>基于请求/响应模型：一次请求对应一次响应。</li>
<li>无状态：每次请求之间相互独立，不能交互数据。</li>
</ul>
<p><strong>历史版本</strong>：</p>
<ul>
<li>1.0：每一次请求响应都会建立新的连接。</li>
<li>1.1：复用连接。</li>
</ul>
<h2 id="2-请求消息数据格式"><a href="#2-请求消息数据格式" class="headerlink" title="2.请求消息数据格式"></a>2.请求消息数据格式</h2><h3 id="2-1-请求行"><a href="#2-1-请求行" class="headerlink" title="2.1 请求行"></a>2.1 <strong>请求行</strong></h3><ul>
<li>格式：请求方式 请求url 请求协议/版本</li>
<li>请求方式：7中，常用2种：<ul>
<li>GET：<ul>
<li>请求参数在请求行中，在url后。</li>
<li>请求的url长度有限制。</li>
<li>不太安全。</li>
</ul>
</li>
<li>POST：<ul>
<li>请求参数在请求体中。</li>
<li>请求的url长度没有限制。</li>
<li>相对安全。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-请求头"><a href="#2-2-请求头" class="headerlink" title="2.2 请求头"></a>2.2 <strong>请求头</strong></h3><ul>
<li>格式：请求头名称：请求头值</li>
<li>常见请求头：<ul>
<li>User-Agent：告诉服务器访问所使用的浏览器版本信息，解决浏览器兼容性问题。</li>
<li>Referer：告诉服务器请求来源。<ul>
<li>防盗链</li>
<li>统计工作</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-请求空行"><a href="#2-3-请求空行" class="headerlink" title="2.3 请求空行"></a>2.3 <strong>请求空行</strong></h3><ul>
<li>空行，用于分割POST请求的请求头和请求体。</li>
</ul>
<h3 id="2-4-请求体（正文）"><a href="#2-4-请求体（正文）" class="headerlink" title="2.4 请求体（正文）"></a>2.4 <strong>请求体（正文）</strong></h3><ul>
<li>封装POST请求消息的请求参数。</li>
</ul>
<p>字符串格式：</p>
<blockquote>
<p>GET /login.html HTTP/1.1<br>Host: localhost:8080<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36 Sec-Fetch-Dest: document<br>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8<br>Referer: <a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a></p>
</blockquote>
<h2 id="3-Request对象"><a href="#3-Request对象" class="headerlink" title="3.Request对象"></a>3.Request对象</h2><h3 id="3-1-request-继承体系结构"><a href="#3-1-request-继承体系结构" class="headerlink" title="3.1 request 继承体系结构"></a>3.1 request 继承体系结构</h3><ul>
<li>ServletRequest(接口) &lt;— HttpServletRequest(接口) —org.apache.catalina.connector.RequestFacade 类(tomcat)</li>
</ul>
<h3 id="3-2-request-功能"><a href="#3-2-request-功能" class="headerlink" title="3.2 request 功能"></a>3.2 request 功能</h3><h4 id="3-2-1-获取请求消息数据"><a href="#3-2-1-获取请求消息数据" class="headerlink" title="3.2.1.获取请求消息数据"></a>3.2.1.获取请求消息数据</h4><h5 id="获取请求行数据"><a href="#获取请求行数据" class="headerlink" title="获取请求行数据"></a>获取<strong>请求行</strong>数据</h5><ul>
<li>GET /demo/show？name=zhangsan HTTP/1.1</li>
<li>方法：<ul>
<li>获取请求方式：GET<ul>
<li>String getMethod()</li>
</ul>
</li>
<li><strong>获取虚拟目录</strong>：/demo<ul>
<li>String getContextPath()</li>
</ul>
</li>
<li>获取 Servlet 路径 /show<ul>
<li>String getServletPath()</li>
</ul>
</li>
<li>获取 get 方式请求参数：name=zhangsan<ul>
<li>String getQueryString()</li>
</ul>
</li>
<li><strong>获取请求URI</strong>：/demo/show<ul>
<li>String getRequestURI()：/demo/show</li>
<li>StringBuffer getRequestURL()：<a href="http://localhost/demo/show" target="_blank" rel="noopener">http://localhost/demo/show</a></li>
<li>URI：统一资源标识符。</li>
<li>URL:统一资源定位符。</li>
</ul>
</li>
<li>获取版本及协议：HTTP/1.1。<ul>
<li>String getProtocol()</li>
</ul>
</li>
<li>获取客户机的IP地址。<ul>
<li>String getRemoteAddr()</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="获取请求头数据"><a href="#获取请求头数据" class="headerlink" title="获取请求头数据"></a>获取<strong>请求头</strong>数据</h5><ul>
<li><strong>String getHeader(String name)</strong>：通过请求头的名称获取请求头的值。</li>
<li>Enumeration<string> getHeaderNames()：获取所有的请求头名称。</string></li>
</ul>
<p><img src="/Java/JavaWeb/HTTP/HTTP学习笔记/获取请求头.png" alt="获取请求头" style="zoom:70%;"></p>
<h5 id="获取请求体数据"><a href="#获取请求体数据" class="headerlink" title="获取请求体数据"></a>获取<strong>请求体</strong>数据</h5><ul>
<li>1.获取流对象。<ul>
<li>BufferedReader getReader()：获取字符输入流，只能操作字符数据。</li>
<li>ServletInputStream getInputStream()：获取字节输入流，可操作所有类型数据。</li>
</ul>
</li>
<li>2.从流对象中获取数据。</li>
</ul>
<h4 id="3-2-2-其他功能"><a href="#3-2-2-其他功能" class="headerlink" title="3.2.2 其他功能"></a>3.2.2 其他功能</h4><h5 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h5><ul>
<li>通用方式：get 和 post 请求都可以用。</li>
<li>String getParameter(String name)：根据参数名称获取参数值    username=zs&amp;password=123</li>
<li>String[] getParameterValues(String name)：根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</li>
<li>Enumeration<string> getParameterNames()：获取所有请求的参数名称</string></li>
<li>Map<string,string[]> getParameterMap():获取所有参数的map集合</string,string[]></li>
</ul>
<h5 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h5><ul>
<li>一种在服务器内部的资源跳转方式。</li>
<li>步骤：<ul>
<li>1.通过request对象获取请求转发器对象：<br>  RequestDispatcher getRequestDispatcher(String path)</li>
<li>2.使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </li>
</ul>
</li>
<li>特点：<ul>
<li>浏览器地址栏路径不发生变化。</li>
<li>只能转发到当前服务器内部资源中。</li>
<li>请求转发只是一次请求。</li>
</ul>
</li>
</ul>
<h5 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h5><ul>
<li>域对象：一个有作用范围的对象，可以在范围内共享数据。</li>
<li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据。</li>
<li>方法：<ul>
<li>void setAttribute(String name,Object obj)：存储数据。</li>
<li>Object getAttitude(String name)：通过键获取值。</li>
<li>void removeAttribute(String name)：通过键移除键值对。</li>
</ul>
</li>
</ul>
<h5 id="获取-ServletContext"><a href="#获取-ServletContext" class="headerlink" title="获取 ServletContext"></a>获取 ServletContext</h5><ul>
<li>ServletContext getServletContext()</li>
</ul>
<h3 id="3-3-案例：用户登录"><a href="#3-3-案例：用户登录" class="headerlink" title="3.3 案例：用户登录"></a>3.3 案例：用户登录</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h4><ul>
<li>1.编写 <code>login.html</code> 登录页面。<br>username &amp; password 两个输入框</li>
<li>2.使用 Druid 数据库连接池技术,操作 mysql ，test01数据库中 stuinfo 表。</li>
<li>3.使用 JdbcTemplate 技术封装 JDBC。</li>
<li>4.登录成功跳转到 SuccessServlet 展示：登录成功！用户名,欢迎您。</li>
<li>5.登录失败跳转到 FailServlet 展示：登录失败，用户名或密码错误。</li>
</ul>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a><strong>案例分析</strong></h4><p><img src="/Java/JavaWeb/HTTP/HTTP学习笔记/登录案例分析.bmp" alt="登录案例分析" style="zoom:60%;"></p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h4><ul>
<li>1.编写 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/web/login.html" target="_blank" rel="noopener">login.html</a></strong> 登陆页面。</li>
<li><p>2.创建数据库环境。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test01;</span><br><span class="line"><span class="keyword">USE</span> test01;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PASSWORD</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.创建实体类 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/domain/User.java" target="_blank" rel="noopener">User</a></strong>。</p>
</li>
<li>4.编写工具类 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/util/JDBCUtils.java" target="_blank" rel="noopener">JDBCUtils</a></strong>。</li>
<li>5.创建包 <code>com.coderhuye.dao</code> ，创建类 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/dao/UserDao.java" target="_blank" rel="noopener">UserDao</a></strong>,提供 login 方法。</li>
<li>6.编写 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/web/servlet/LoginServlet.java" target="_blank" rel="noopener">LoginServlet</a></strong> 类。</li>
<li>7.编写 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/web/servlet/FailServlet.java" target="_blank" rel="noopener">FailServlet</a></strong> 和 <strong><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginTest/src/com/coderhuye/web/servlet/SuccessServlet.java" target="_blank" rel="noopener">SuccessServlet</a></strong> 类。</li>
<li>8.login.html 中 form 表单的 action 路径的写法。<ul>
<li>虚拟目录+Servlet的资源路径</li>
</ul>
</li>
<li>9.BeanUtils工具类，简化数据封装。<ul>
<li>commons-beanutils-1.8.0.jar</li>
<li><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/LoginServlet.java" target="_blank" rel="noopener">使用代码</a></li>
<li>1.JavaBean：标准的Java类<ul>
<li>要求：<ul>
<li>1.类必须被public修饰。</li>
<li>2.必须提供空参的构造器。</li>
<li>3.成员变量必须使用private修饰。</li>
<li>4.提供公共setter和getter方法。</li>
</ul>
</li>
<li>功能：封装数据。</li>
</ul>
</li>
<li>2.方法：<ul>
<li>setProperty()</li>
<li>getProperty()</li>
<li>populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-响应消息数据格式"><a href="#4-响应消息数据格式" class="headerlink" title="4.响应消息数据格式"></a>4.响应消息数据格式</h2><h3 id="4-1-响应行"><a href="#4-1-响应行" class="headerlink" title="4.1 响应行"></a>4.1 响应行</h3><ul>
<li>组成：协议/版本 响应状态码 状态码描述</li>
<li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</li>
</ul>
<p><img src="/Java/JavaWeb/HTTP/HTTP学习笔记/状态码.png" alt="状态码" style="zoom:60%;"></p>
<h3 id="4-2-响应头"><a href="#4-2-响应头" class="headerlink" title="4.2 响应头"></a>4.2 响应头</h3><ul>
<li>格式：    头名称： 值</li>
<li>常见的响应头：<ul>
<li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式。</li>
<li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据。<ul>
<li>in-line：默认值，在当前页面内打开。</li>
<li>attachment;filename=xxx：以附件形式打开响应体，文件下载</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-3-响应空行"><a href="#4-3-响应空行" class="headerlink" title="4.3 响应空行"></a>4.3 响应空行</h3><h3 id="4-4-响应体"><a href="#4-4-响应体" class="headerlink" title="4.4 响应体"></a>4.4 响应体</h3><ul>
<li>传输的数据</li>
</ul>
<h3 id="响应字符串格式"><a href="#响应字符串格式" class="headerlink" title="响应字符串格式"></a>响应字符串格式</h3><blockquote>
<p>HTTP/1.1 200 OK<br>Content-Type: text/html;charset=UTF-8<br>Content-Length: 101<br>Date: Wed, 06 Jun 2018 07:08:42 GMT</p>
</blockquote>
<h2 id="5-Response对象"><a href="#5-Response对象" class="headerlink" title="5.Response对象"></a>5.Response对象</h2><h3 id="5-1-功能"><a href="#5-1-功能" class="headerlink" title="5.1 功能"></a>5.1 功能</h3><h4 id="设置响应消息"><a href="#设置响应消息" class="headerlink" title="设置响应消息"></a>设置响应消息</h4><ul>
<li>设置响应行<ul>
<li>格式：HTTP/1.1 200 ok</li>
<li>设置状态码：setStatus(int sc) </li>
</ul>
</li>
<li>设置响应头<ul>
<li>setHeader(String name, String value) </li>
</ul>
</li>
<li>设置响应体<ul>
<li>1.获取输出流<br>字符输出流：PrintWriter getWriter()<br>字节输出流：ServletOutputStream getOutputStream()</li>
<li>2.使用输出流，将数据输出到客户端浏览器</li>
</ul>
</li>
</ul>
<h3 id="5-2-案例"><a href="#5-2-案例" class="headerlink" title="5.2 案例"></a>5.2 案例</h3><h4 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h4><p><img src="/Java/JavaWeb/HTTP/HTTP学习笔记/重定向.bmp" alt="重定向" style="zoom:60%;"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问/responseDemo1，自动跳转到/responseDemo2资源</span></span><br><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//2.设置响应头location</span></span><br><span class="line">response.setHeader(<span class="string">"location"</span>,<span class="string">"/Response/responseDemo2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态获取虚拟目录</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"><span class="comment">//简单的重定向方法</span></span><br><span class="line">response.sendRedirect(contextPath+<span class="string">"/responseDemo2"</span>);</span><br><span class="line"><span class="comment">//response.sendRedirect("https://tommymerlin.gitee.io/");</span></span><br></pre></td></tr></table></figure>
<h5 id="重定向的特点：redirect"><a href="#重定向的特点：redirect" class="headerlink" title="重定向的特点：redirect"></a><strong>重定向</strong>的特点：redirect</h5><ul>
<li>地址栏发生变化。</li>
<li>重定向可以访问其他站点(服务器)的资源。</li>
<li>重定向是<strong>两次请求</strong>，不能使用request对象来共享数据。</li>
</ul>
<h5 id="转发的特点：forward"><a href="#转发的特点：forward" class="headerlink" title="转发的特点：forward"></a><strong>转发</strong>的特点：forward</h5><ul>
<li>转发地址栏路径不变。</li>
<li>转发只能访问当前服务器下的资源。</li>
<li>转发是<strong>一次请求</strong>，可以使用request对象来共享数据。</li>
</ul>
<h5 id="路径写法："><a href="#路径写法：" class="headerlink" title="路径写法："></a>路径写法：</h5><ul>
<li>路径分类：<ul>
<li><strong>相对路径</strong>：通过相对路径不可以确定唯一资源。<br>如：./index.html  不以/开头，以 . 开头<ul>
<li>规则：找到当前资源和目标资源之间的相对位置关系。<ul>
<li>./：当前目录</li>
<li>../：后退一级目录</li>
</ul>
</li>
</ul>
</li>
<li><strong>绝对路径</strong>：通过绝对路径可以确定唯一资源。<br>如：<a href="http://localhost/day15/responseDemo2" target="_blank" rel="noopener">http://localhost/day15/responseDemo2</a><br>​        /day15/responseDemo2<ul>
<li>规则：判断定义的路径是给谁用的？判断请求将来从哪发出。<ul>
<li>给客户端浏览器使用：需要加虚拟目录(项目的访问路径)。<ul>
<li>建议虚拟目录动态获取：request.getContextPath()</li>
</ul>
</li>
<li>给服务器使用：不需要加虚拟目录。<ul>
<li>转发路径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h4><p>步骤</p>
<ul>
<li>获取字符输出流</li>
<li>输出数据</li>
</ul>
<p>乱码问题</p>
<ul>
<li>PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1。</li>
<li>设置编码（在获取流之前设置）。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">PrintWriter writer = response.getWriter();</span><br><span class="line">writer.write(<span class="string">"&lt;h1&gt;Hello Java&lt;/h1&gt;&lt;br&gt;&lt;a href='http://www.baidu.com'&gt;百度&lt;/a&gt;"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h4><p>步骤</p>
<ul>
<li>获取字节输出流</li>
<li>输出数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//1.获取字节输出流</span></span><br><span class="line">ServletOutputStream sos = response.getOutputStream();</span><br><span class="line"><span class="comment">//2.输出数据</span></span><br><span class="line">sos.write(<span class="string">"你好"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure>
<h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p><a href="https://gitee.com/TommyMerlin/code-host/blob/master/Java/CheckCodeServlet.java" target="_blank" rel="noopener">代码</a></p>
<h2 id="6-ServletContext对象"><a href="#6-ServletContext对象" class="headerlink" title="6.ServletContext对象"></a>6.ServletContext对象</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><p>代表整个 web 应用，可以和程序的容器(服务器)来通信</p>
<h3 id="6-2-获取"><a href="#6-2-获取" class="headerlink" title="6.2 获取"></a>6.2 获取</h3><ul>
<li>通过 <strong>request</strong> 对象获取。<ul>
<li>request.getServletContext();</li>
</ul>
</li>
<li>通过 <strong>HttpServlet</strong> 获取。<ul>
<li>this.getServletContext();</li>
</ul>
</li>
</ul>
<h3 id="6-3-功能"><a href="#6-3-功能" class="headerlink" title="6.3 功能"></a>6.3 功能</h3><ul>
<li><p>获取 <strong>MIME</strong> 类型：</p>
<ul>
<li>MIME 类型:在互联网通信过程中定义的一种文件数据类型。</li>
<li>格式： 大类型/小类型   text/html        image/jpeg</li>
<li>获取：String getMimeType(String file)</li>
</ul>
</li>
<li><p>域对象：<strong>共享数据</strong></p>
<ul>
<li>setAttribute(String name,Object value)</li>
<li>getAttribute(String name)</li>
<li>removeAttribute(String name)</li>
<li>ServletContext <strong>对象范围</strong>：所有用户所有请求的数据</li>
</ul>
</li>
<li><p>获取文件的<strong>真实(服务器)路径</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String path)</span>  </span></span><br><span class="line"><span class="function">String b </span>= context.getRealPath(<span class="string">"/b.txt"</span>);                <span class="comment">//web目录下资源访问</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">	</span><br><span class="line">String c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);        <span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">	</span><br><span class="line">String a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-4-案例"><a href="#6-4-案例" class="headerlink" title="6.4 案例"></a>6.4 案例</h3><h4 id="文件下载需求"><a href="#文件下载需求" class="headerlink" title="文件下载需求"></a>文件下载需求</h4><ul>
<li>页面显示超链接。</li>
<li>点击超链接后弹出下载提示框。</li>
<li>完成图片文件下载。</li>
</ul>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul>
<li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框—&gt;<strong>不满足需求</strong></li>
<li>任何资源都必须弹出下载提示框。</li>
<li>使用响应头设置资源的打开方式：<pre><code>    * content-disposition:attachment;filename=xxx
</code></pre></li>
</ul>
<h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li>1.定义页面，编辑超链接 href 属性，指向 Servlet，传递资源名称 filename。</li>
<li>2.定义Servlet。<ul>
<li>a.获取文件名称</li>
<li>b.使用字节输入流加载文件进内存</li>
<li>c.指定response的响应头<br>content-disposition:attachment;filename=xxx</li>
<li>d.将数据写出到response输出流</li>
</ul>
</li>
</ul>
<h4 id="中文文件名问题"><a href="#中文文件名问题" class="headerlink" title="中文文件名问题"></a>中文文件名问题</h4><ul>
<li>获取客户端使用的浏览器版本信息。</li>
<li>根据不同的版本信息，设置filename的编码方式不同。</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote>
<p>html文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Response/downloadServlet?filename=1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>DownloadServlet.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"><span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line"><span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line"><span class="comment">//2.2用字节流关联</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置response的响应头</span></span><br><span class="line"><span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">String mimeType = servletContext.getMimeType(filename);  <span class="comment">//获取文件的mime类型</span></span><br><span class="line">response.setHeader(<span class="string">"content-type"</span>,mimeType);  <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决中文文件名问题</span></span><br><span class="line"><span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line"><span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"><span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">ServletOutputStream sos = response.getOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">        UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(</span><br><span class="line">                filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet学习笔记</title>
    <url>/Java/JavaWeb/Servlet/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-Servlet-概述"><a href="#1-Servlet-概述" class="headerlink" title="1.Servlet 概述"></a>1.Servlet 概述</h2><ul>
<li><p><strong>概念</strong>：运行在服务器端的小程序。</p>
<ul>
<li>Servlet 就是一个<strong>接口</strong>，定义了 Java 类被浏览器访问（Tomcat识别）的规则。</li>
</ul>
</li>
<li><p><strong>快速入门</strong>：</p>
<ul>
<li>1.创建 JavaEE 项目。</li>
<li>2.定义一个类，实现 Servlet 接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>3.实现接口中的抽象方法。</li>
<li>4.配置 Servlet：<code>web\WEB-INF\web.xml</code>。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.coderhuye.web.servlet.ServerletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>执行原理</strong>：</p>
<ul>
<li>1.当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径。</li>
<li>2.查找web.xml文件，是否有对应的<url-pattern>标签体内容。</url-pattern></li>
<li>3.如果有，则在找到对应的<servlet-class>全类名。</servlet-class></li>
<li>4.tomcat会将字节码文件加载进内存，并且创建其对象。</li>
<li>5.调用其方法。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-Servlet-生命周期"><a href="#2-Servlet-生命周期" class="headerlink" title="2.Servlet 生命周期"></a>2.Servlet 生命周期</h2><ul>
<li>1.<strong>创建</strong>：执行 init 方法，仅执行一次。<ul>
<li>Servlet 什么时候被创建？<ul>
<li>默认情况下，第一次访问时被创建。</li>
<li>可以在<servelet>标签下配置指定 Servlet 被创建的时机。<br><img src="/Java/JavaWeb/Servlet/Servlet学习笔记/配置Servlet创建时机.png" alt="配置Servlet创建时机" style="zoom:70%;"></servelet></li>
</ul>
</li>
</ul>
</li>
<li>Servlet 在内存中只有一个对象，是单例的。<ul>
<li>多个用户同时访问时，存在线程安全问题。</li>
<li>解决：尽量不在 Servlet 中定义成员变量。即使定义了成员变量，也不要对其修改值。</li>
</ul>
</li>
<li>2.<strong>提供服务</strong>：执行 sevice 方法，每访问一次 Servlet ，就会执行一次。</li>
<li>3.<strong>销毁</strong>：服务器正常关闭时执行一次。</li>
</ul>
<hr>
<h2 id="3-Servlet3-0"><a href="#3-Servlet3-0" class="headerlink" title="3.Servlet3.0"></a>3.Servlet3.0</h2><ul>
<li>支持注解配置</li>
<li>步骤：<ul>
<li>创建 JavaEE 项目，选择 Servlet 版本 &gt;3.0，可不创建 web.xml。</li>
<li>定义一个 Servlet 实现类。</li>
<li>复写方法<ul>
<li>在类上使用 @WebServlet 注解。<ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/demo1"</span>)</span><br><span class="line">or</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo1"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-Servlet-体系结构"><a href="#4-Servlet-体系结构" class="headerlink" title="4.Servlet 体系结构"></a>4.Servlet 体系结构</h2><p><img src="/Java/JavaWeb/Servlet/Servlet学习笔记/Servlet继承关系.png" alt="Servlet继承关系" style="zoom:60%;"></p>
<ul>
<li>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象方法。</li>
<li>HttpServlet：对http协议的一种封装，简化操作。<ul>
<li>定义类继承HttpServlet。</li>
<li>复写doGet/doPost方法。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="5-Servlet-相关配置"><a href="#5-Servlet-相关配置" class="headerlink" title="5.Servlet 相关配置"></a>5.Servlet 相关配置</h2><ul>
<li><p>urlPatterns：一个Servlet可以定义多个访问路径 ：</p>
<ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(&#123;<span class="string">"/d4"</span>,<span class="string">"/demo4"</span>,<span class="string">"/dd4"</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>路径定义规则：</p>
<ul>
<li>/xxx：路径匹配</li>
<li>/xxx/xxx：多层路径，目录结构</li>
<li>*.do：扩展名匹配</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux服务器端手动部署Tomcat</title>
    <url>/Linux/%E5%9C%A8Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2Tomcat/</url>
    <content><![CDATA[<h2 id="1-安装-jdk-并配置路径"><a href="#1-安装-jdk-并配置路径" class="headerlink" title="1.安装 jdk 并配置路径"></a>1.安装 jdk 并配置路径</h2><p>将 jdk 解压放到 <code>/usr/local/</code> 目录下。</p>
<p>修改 <code>/etc/profile</code> 文档，在末尾添加如下语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_191</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>
<p>刷新配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h2 id="2-安装-Tomcat"><a href="#2-安装-Tomcat" class="headerlink" title="2.安装 Tomcat"></a>2.安装 Tomcat</h2><p>解压Tomcat压缩包。</p>
<p>修改 <code>/conf/server.xml</code>文件，将端口8080改为80。</p>
<p><img src="/Linux/在Linux服务器端手动部署Tomcat/修改Server配置.png" alt="修改Server配置" style="zoom:100%;"></p>
<h2 id="3-在阿里云服务器上添加安全组规则"><a href="#3-在阿里云服务器上添加安全组规则" class="headerlink" title="3.在阿里云服务器上添加安全组规则"></a>3.在阿里云服务器上添加安全组规则</h2><p>添加80端口的监听。</p>
<p><img src="/Linux/在Linux服务器端手动部署Tomcat/添加安全组规则.png" alt="添加安全组规则" style="zoom:60%;"></p>
<h2 id="4-启动-Tomcat-服务器"><a href="#4-启动-Tomcat-服务器" class="headerlink" title="4.启动 Tomcat 服务器"></a>4.启动 Tomcat 服务器</h2><p>执行 <code>/bin/startup.sh</code>脚本，启动服务器，访问服务器地址就能看到部署成功！</p>
<p><img src="/Linux/在Linux服务器端手动部署Tomcat/Tomcat.png" alt="Tomcat" style="zoom:50%;"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat部署项目的三种方式</title>
    <url>/Java/JavaWeb/Tomcat/Tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-直接将项目放到webapps目录下"><a href="#1-直接将项目放到webapps目录下" class="headerlink" title="1.直接将项目放到webapps目录下"></a>1.直接将项目放到webapps目录下</h2><ul>
<li>项目的访问路径—&gt;虚拟路径</li>
<li>简化部署：将项目打包成一个war包，再将war包放置到webapps目录下<ul>
<li>war包会自动解压缩（热部署）</li>
</ul>
</li>
</ul>
<h2 id="2-配置conf-server-xml文件"><a href="#2-配置conf-server-xml文件" class="headerlink" title="2.配置conf/server.xml文件"></a>2.配置conf/server.xml文件</h2><p>在<host>标签体中配置</host></p>
<context daobase="D:\hello" path="/hello">

<ul>
<li>docBase：项目存放的路径</li>
<li>path：虚拟路径</li>
</ul>
<h2 id="3-在conf-Catalina-localhost创建任意名称的xml文件"><a href="#3-在conf-Catalina-localhost创建任意名称的xml文件" class="headerlink" title="3.在conf\Catalina\localhost创建任意名称的xml文件"></a>3.在conf\Catalina\localhost创建任意名称的xml文件</h2><p>在xml文件中编写<context daobase="D:\hello"></context></p>
<ul>
<li>虚拟目录：xml文件的名称</li>
</ul>
</context>]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构与实践 第2章-微服务架构综述</title>
    <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%AC2%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="1微服务架构概述"><a href="#1微服务架构概述" class="headerlink" title="1微服务架构概述"></a>1微服务架构概述</h2><p><strong>微服务定义</strong>(Martin Fowler)：微服务架构为一种架构模式，提倡将单一应用划分成<strong>一组小的服务</strong>，服务之间互相协调、互相配合。每个服务运行在<strong>独立进程</strong>中，服务间沟通采用<strong>轻量级通信机制</strong>。每个服务围绕具体业务构建，可<strong>独立部署</strong>。</p>
<h3 id="1-1-“微”的定义"><a href="#1-1-“微”的定义" class="headerlink" title="1.1 “微”的定义"></a>1.1 “微”的定义</h3><ul>
<li>代码行数：×</li>
<li>重写时间：×</li>
<li><strong>团队共识</strong><ul>
<li>业务独立性</li>
<li>团队自主性：人数≤10，全功能团队。</li>
</ul>
</li>
</ul>
<h3 id="1-2-单一职责"><a href="#1-2-单一职责" class="headerlink" title="1.2 单一职责"></a>1.2 单一职责</h3><ul>
<li><p><strong>高内聚，低耦合。</strong></p>
</li>
<li><p><strong>单一职责原则(SRP)</strong>：一个对象只能有一个发生变化的原因。若一个对象可被多个原因改变，则说明该对象承担了多个职责。</p>
</li>
</ul>
<h3 id="1-3-轻量级通信"><a href="#1-3-轻量级通信" class="headerlink" title="1.3 轻量级通信"></a>1.3 轻量级通信</h3><p><strong>轻量级通信</strong>：语言无关、平台无关的交互方式。</p>
<h3 id="1-4-独立性"><a href="#1-4-独立性" class="headerlink" title="1.4 独立性"></a>1.4 独立性</h3><p>在应用交付过程中，开发、测试以及部署的独立。</p>
<p><img src="/微服务/微服务读书笔记/微服务架构与实践第2章-微服务架构综述/独立性.png" alt="独立性" style="zoom:80%;"></p>
<h3 id="1-4-进程隔离"><a href="#1-4-进程隔离" class="headerlink" title="1.4 进程隔离"></a>1.4 进程隔离</h3><p><strong>单块架构</strong>：对应用进行部署时，需先停掉当前运行应用，部署完成后在重新启动，无法做到独立部署。</p>
<p><strong>微服务架构</strong>：每个服务均为高度自治的独立业务实体，能很容易地部署到不同的主机上。</p>
<p><img src="/微服务/微服务读书笔记/微服务架构与实践第2章-微服务架构综述/进程隔离.png" alt="进程隔离" style="zoom:80%;"></p>
<h2 id="2-微服务架构与SOA"><a href="#2-微服务架构与SOA" class="headerlink" title="2.微服务架构与SOA"></a>2.微服务架构与SOA</h2><h3 id="2-1-SOA概述"><a href="#2-1-SOA概述" class="headerlink" title="2.1 SOA概述"></a>2.1 SOA概述</h3><p><strong>SOA</strong>：对于复杂系统，按照不同的、可重用的粒度划分，将功能相关的一组功能提供者组织在一起为用户提供服务。</p>
<h3 id="2-2-微服务和SOA"><a href="#2-2-微服务和SOA" class="headerlink" title="2.2 微服务和SOA"></a>2.2 微服务和SOA</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">SOA实现</th>
<th style="text-align:left">微服务架构实现</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">企业级，自顶向下开展实施</td>
<td style="text-align:left">团队级，自底向上开展实施</td>
</tr>
<tr>
<td style="text-align:left">服务由多个子系统组成，粒度大</td>
<td style="text-align:left">一个系统被拆分成多个服务，粒度细</td>
</tr>
<tr>
<td style="text-align:left">企业服务总线，集中式的服务架构</td>
<td style="text-align:left">无集中式总线，松散的服务架构</td>
</tr>
<tr>
<td style="text-align:left">集成方式复杂（ESB/WS/SOAP）</td>
<td style="text-align:left">集成方式简单（HTTP/REST/JSON）</td>
</tr>
<tr>
<td style="text-align:left">单块架构系统，相互依赖，部署复杂</td>
<td style="text-align:left">服务能独立部署</td>
</tr>
</tbody>
</table>
</div>
<p><strong>微服务是SOA的子集</strong></p>
<h2 id="3-微服务的本质"><a href="#3-微服务的本质" class="headerlink" title="3.微服务的本质"></a>3.微服务的本质</h2><p>微服务本质特征：</p>
<ul>
<li>服务作为组件<ul>
<li>以松散的服务方式，构建<strong>可独立化部署</strong>的模块化应用</li>
<li>组件之间定义了清晰的、<strong>语言和平台无关</strong>的接口</li>
<li>分布式调用比进程内调用<strong>更耗时间</strong>，严重依赖网络可靠性与稳定性</li>
</ul>
</li>
<li>围绕业务组织团队<ul>
<li>以业务为核心，按业务能力组织团队，团队成员具有多样性的技能</li>
</ul>
</li>
<li>关注产品而非项目<ul>
<li>采用产品模式构建，团队负责服务的整个生命周期</li>
</ul>
</li>
<li>技术多样性<ul>
<li>针对不同业务选取合适的技术方案</li>
<li>易在系统上尝试新的技术和解决方案</li>
</ul>
</li>
<li>业务数据独立<ul>
<li>服务<strong>自主管理</strong>其相关的业务数据</li>
</ul>
</li>
<li>基础设施自动化<ul>
<li>部署与运维成本随服务增多呈指数级增长</li>
<li>对<strong>持续交付</strong>和<strong>部署流水线</strong>要求较高</li>
</ul>
</li>
<li>演进式架构<ul>
<li>能够不断调整软件的架构，不断演进</li>
</ul>
</li>
</ul>
<h2 id="4-微服务并非万能"><a href="#4-微服务并非万能" class="headerlink" title="4.微服务并非万能"></a>4.微服务并非万能</h2><p>微服务实施过程中，需考虑如下因素：</p>
<ul>
<li>分布式系统的复杂度<ul>
<li>性能</li>
<li>可靠性</li>
<li>异步</li>
<li>数据一致性</li>
<li>工具</li>
</ul>
</li>
<li>运维成本<ul>
<li>配置</li>
<li>部署</li>
<li>监控与告警</li>
<li>日志收集</li>
</ul>
</li>
<li>部署自动化</li>
<li>DevOps与组织架构<ul>
<li>按需调整组织架构，构建全功能团队</li>
</ul>
</li>
<li>服务间依赖测试</li>
<li>服务间依赖管理</li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
        <category>微服务读书笔记</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构与实践 第1章-单块架构及其面临的挑战</title>
    <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%AC1%E7%AB%A0-%E5%8D%95%E5%9D%97%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E9%9D%A2%E4%B8%B4%E7%9A%84%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<h2 id="1-三层应用架构"><a href="#1-三层应用架构" class="headerlink" title="1.三层应用架构"></a>1.三层应用架构</h2><h3 id="1-1-三层架构"><a href="#1-1-三层架构" class="headerlink" title="1.1 三层架构"></a>1.1 三层架构</h3><ul>
<li><strong>表示层</strong>：用户交互部分。</li>
<li><strong>业务逻辑层</strong>：根据用户输入信息，进行逻辑运算或业务处理。</li>
<li><strong>数据访问层</strong>：有效地将数据存储到数据库、文件系统等。</li>
</ul>
<p><img src="/微服务/微服务读书笔记/微服务架构与实践第1章-单块架构及其面临的挑战/三层架构.png" alt="三层架构" style="zoom:80%;"></p>
<h3 id="1-2-三层架构优势"><a href="#1-2-三层架构优势" class="headerlink" title="1.2 三层架构优势"></a>1.2 三层架构优势</h3><ul>
<li>解决应用程序中代码间调用复杂、代码职责不清问题。</li>
<li>接口与实现分离，易于用不同实现替代现有实现。</li>
<li>有效降低层与层之间的依赖。</li>
<li>使不同职责人负责不同部分。</li>
</ul>
<h2 id="2-单块架构"><a href="#2-单块架构" class="headerlink" title="2.单块架构"></a>2.单块架构</h2><h3 id="2-1-单块架构定义"><a href="#2-1-单块架构定义" class="headerlink" title="2.1 单块架构定义"></a>2.1 单块架构定义</h3><p><strong>单块架构应用</strong>：功能集中、代码和数据中心化、一个发布包、部署后运行在同一进程的应用程序。</p>
<h3 id="2-2-单块架构优势"><a href="#2-2-单块架构优势" class="headerlink" title="2.2 单块架构优势"></a>2.2 单块架构优势</h3><ul>
<li>易于开发</li>
<li>易于测试</li>
<li>易于部署</li>
<li>易于水平伸缩</li>
</ul>
<h3 id="2-3-单块架构面临的挑战"><a href="#2-3-单块架构面临的挑战" class="headerlink" title="2.3 单块架构面临的挑战"></a>2.3 单块架构面临的挑战</h3><ul>
<li>维护成本增加</li>
<li>持续交付时间长</li>
<li>新人培养周期长</li>
<li>技术选型成本高</li>
<li>可扩展性差<ul>
<li>垂直扩展——成本高</li>
<li>水平扩展——建立集群，在集群中不断增加新节点</li>
</ul>
</li>
<li>构建全功能团队难</li>
</ul>
<blockquote>
<p><strong>垂直伸缩</strong>: 升级到更强大的服务器（多CPU 昂贵大中型机）。<br><strong>水平伸缩</strong>: 增加更便宜的机器。</p>
</blockquote>
]]></content>
      <categories>
        <category>微服务</category>
        <category>微服务读书笔记</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab打开后长时间处于“正在初始化”或“正忙”状态解决办法</title>
    <url>/%E6%95%99%E7%A8%8B/Matlab%E6%89%93%E5%BC%80%E5%90%8E%E9%95%BF%E6%97%B6%E9%97%B4%E5%A4%84%E4%BA%8E%E2%80%9C%E6%AD%A3%E5%9C%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%9D%E6%88%96%E2%80%9C%E6%AD%A3%E5%BF%99%E2%80%9D%E7%8A%B6%E6%80%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-许可证问题"><a href="#1-许可证问题" class="headerlink" title="1.许可证问题"></a>1.许可证问题</h2><h3 id="1-1-解决方法1"><a href="#1-1-解决方法1" class="headerlink" title="1.1 解决方法1"></a>1.1 解决方法1</h3><p>MATLAB 在启动时，一直停留在“正在初始化”的状态，有可能是因为 MATLAB 一直在找着本机的许可证。</p>
<p>有可能是设置了 <code>LM_LICENSE_FILE</code> 的环境变量。这个变量告诉 MATLAB 或者其他应用程序去哪里查找许可证文件。如果您有一个网络许可证，但是当前又没有联网，那么 MATLAB 就会一直停留在这个状态。</p>
<p><strong>注意</strong>：还有一个环境变量 <code>MLM_LICENSE_FILE</code> 也会导致这一问题。这个环境变量只用于 MATLAB。</p>
<p>要解决这个问题，您可以执行以下操作：</p>
<ul>
<li>1.右击“<strong>我的电脑</strong>”，然后选择“<strong>属性</strong>”。（有可能需要在控制面板中双击“系统”）。</li>
<li>2.选择“<strong>高级</strong>”标签，点击“<strong>环境变量</strong>”。</li>
<li>3.在窗口下方的系统变量中，查找变量 <code>LM_LICENSE_FILE</code>。</li>
<li>4.如果有 <code>LM_LICENSE_FILE</code> 变量存在，请看第5步。如果没有，请创建一个 <code>LM_LICENSE_FILE</code> 变量：点击“新建”，然后在变量名框中输入 <code>LM_LICENSE_FILE</code>。</li>
<li>5.把 <code>LM_LICENSE_FILE</code> 的值设为 MATLAB <strong>许可证文件的绝对路径</strong>。如果有多个许可证文件，在第一个路径后加上分号（；），然后在写第二个路径。点击“确认”保存。</li>
<li>6.<strong>重新启动</strong> MATLAB。</li>
</ul>
<h3 id="1-2-解决方法2"><a href="#1-2-解决方法2" class="headerlink" title="1.2 解决方法2"></a>1.2 解决方法2</h3><p>如果您仅使用一个许可证来访问 MATLAB 和工具箱，可以在 MATLAB <strong>快捷方式</strong>中指定许可证文件或在启动 MATLAB 时从命令行中指定许可证文件。要实现以上目的，请执行下列步骤：</p>
<ul>
<li>1）右击 MATLAB 的快捷方式并选择“<strong>属性</strong>”。</li>
<li>2）在“<strong>目标</strong>”字段中，输入以下内容：</li>
</ul>
<blockquote>
<p>“$MATLAB\bin\win32\MATLAB.exe” -c “&lt;包括文件名的 MATLAB 许可证文件的完整路径&gt;“</p>
</blockquote>
<p>其中 $MATLAB 是 MATLAB <strong>根目录</strong>，<matlab 许可证文件的路径> 是许可证文件的<strong>绝对路径</strong>。</matlab></p>
<ul>
<li>3）点击“确定”。</li>
<li>4）从快捷方式启动 MATLAB。</li>
</ul>
<h2 id="2-非许可问题"><a href="#2-非许可问题" class="headerlink" title="2.非许可问题"></a>2.非许可问题</h2><h3 id="2-1-解决方法1"><a href="#2-1-解决方法1" class="headerlink" title="2.1 解决方法1"></a>2.1 解决方法1</h3><p><strong>首先确保您已允许查看隐藏文件和文件夹。</strong></p>
<ul>
<li>1.<strong>退出 MATLAB</strong>。确保 MATLAB 不再运行。</li>
<li>2.浏览到文件夹 <code>c:\Documents and Settings\ &lt;your username&gt;\Application Data\MathWorks\MATLAB\</code>或 <code>c:\users\&lt;username&gt;\AppData\Roaming</code></li>
<li>3.<strong>重命名</strong>您使用的 MATLAB 版本目录，以 <code>_old</code> 结尾。如果有名称中包含<code>_licenses</code>的文件夹，不要重命名该文件夹。</li>
<li>4.在<strong>删除</strong>了此目录之后，<strong>重新启动</strong> MATLAB。下次您启动 MATLAB 时会重新创建此目录。</li>
</ul>
<p>如果这没有解决问题，则可以考虑 Windows 上的 MATLAB 7.0 (R14) 和某些显卡提供的图形库之间存在的一个已知问题，这些显卡没有高效使用内存，因而使 MATLAB 7.0 (R14) 比预期更频繁地使用虚拟内存。在这种情况下，禁用显卡卡的硬件图形加速功能可以提高 MATLAB 7.0 (R14) 的性能。为此，请执行下列步骤。</p>
<ul>
<li>1.<strong>关闭</strong> MATLAB。</li>
<li>2.右击 Windows 桌面并选择“<strong>属性</strong>”。</li>
<li>3.在打开的“<strong>显示属性</strong>”窗口中，选择“<strong>设置</strong>”选项卡，然后点击“<strong>高级</strong>”按钮。</li>
<li>4.在打开的窗口中，选择“<strong>疑难解答</strong>”选项卡。</li>
<li>5.将“<strong>硬件加速</strong>”滑动条一直向左设置为“<strong>无</strong>”。</li>
<li>6.点击此窗口中的“确定”，然后再次点击“<strong>显示属性</strong>”窗口中的“确定”。</li>
<li>7.<strong>重新启动</strong> MATLAB。</li>
</ul>
<h3 id="2-2-解决方法2"><a href="#2-2-解决方法2" class="headerlink" title="2.2 解决方法2"></a>2.2 解决方法2</h3><p>在一些情况下，客户报告在后台运行的防病毒程序会降低 MATLAB 的速度。对于这些客户，<strong>禁止防病毒软件扫描 MATLAB 目录</strong>可以大大提高性能。</p>
<p><a href="https://ww2.mathworks.cn/matlabcentral/answers/116115-matlab" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法第二章学习笔记</title>
    <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>感知机——二类分类的线性分类模型</p>
<h2 id="1-感知机模型"><a href="#1-感知机模型" class="headerlink" title="1.感知机模型"></a>1.感知机模型</h2><p>输入空间（特征空间）为 $\mathcal{X}\subseteq R^n$，输出空间为 $\mathcal{Y}\subseteq \{+1,-1\}$，输入 $x\in\mathcal{X}$ 表示实例的特征向量，输出 $y\in\mathcal{Y}$ 表示实例的类别，输入到输出空间的函数：<br>$f(x)=\operatorname{sign}(w \cdot x+b)$ 称为感知机，其中w:权值，b:偏置</p>
<p>感知机几何解释：线性方程 $w\cdot x+b=0$ 对应于特征空间$R^n$中的一个超平面S，w为超平面的法向量，b为超平面的截距，S将特征空间分为两个部分，位于两部分的点分别被分为正、负两类。</p>
<div align="center">    
<img src="/机器学习/统计学习方法/统计学习方法第二章学习笔记/感知机模型.png" width="300" height="250" alt="图片名称" align="center">
<p>感知机模型</p>
</div>

<h2 id="2-感知机学习策略"><a href="#2-感知机学习策略" class="headerlink" title="2.感知机学习策略"></a>2.感知机学习策略</h2><h3 id="2-1-数据集的线性可分性"><a href="#2-1-数据集的线性可分性" class="headerlink" title="2.1 数据集的线性可分性"></a>2.1 数据集的线性可分性</h3><p>存在某个超平面S可将数据集的正实例点和负实例点完全正确地划分到S两侧即为线性可分。</p>
<h3 id="2-2-学习策略"><a href="#2-2-学习策略" class="headerlink" title="2.2 学习策略"></a>2.2 学习策略</h3><p>输入空间 $R^n$ 中任一点 $x_0$ 到超平面S的距离：$\frac{1}{|w|}\left|w \cdot x_{0}+b\right|$</p>
<p>误分类点 $x_i$到超平面S的距离：$-\frac{1}{|w|} y_{i}\left(w \cdot x_{i}+b\right)$</p>
<p>所有误分类点到超平面S的总距离：$-\frac{1}{|w|} \sum_{x_{i}\in M} y_{i}\left(w \cdot x_{i}+b\right)$</p>
<p>不考虑$\frac{1}{|w|}$即得到了感知机学习的损失函数（经验风险）：</p>
<p>$L(w, b)=-\sum_{x_{i} \in M} y_{i}\left(w \cdot x_{i}+b\right) \quad$  (M：误分类点集合)</p>
<h2 id="3-感知机学习算法"><a href="#3-感知机学习算法" class="headerlink" title="3.感知机学习算法"></a>3.感知机学习算法</h2><h3 id="3-1学习算法原始形式"><a href="#3-1学习算法原始形式" class="headerlink" title="3.1学习算法原始形式"></a>3.1学习算法原始形式</h3><p>随机梯度下降法：<br>任选一个初始超平面$w_0、b_0$，每次选择一个误分类点 $y_{i}\left(w \cdot x_{i}+b\right) \leqslant 0$ 使其梯度下降。<br>$w \leftarrow w+\eta y_{i} x_{i}$<br>$b \leftarrow b+\eta y_{i}$</p>
<h3 id="3-2学习算法对偶形式"><a href="#3-2学习算法对偶形式" class="headerlink" title="3.2学习算法对偶形式"></a>3.2学习算法对偶形式</h3><p>通过$w \leftarrow w+\eta y_{i} x_{i}$，$b \leftarrow b+\eta y_{i}$逐步修改w,b，设修改n次，则w,b关于$(x_i,y_i)$的增量为$\alpha_iy_ix_i$和$\alpha_iy_i$，其中$\alpha_i=n_i\eta$，最终学到的w,b可表示为<br>$w=\sum_{i=1}^{N} \alpha_{i} y_{i} x_{i}$<br>$b=\sum_{i=1}^{N} \alpha_{i} y_{i}$</p>
<p>取初值$\alpha \leftarrow 0, \quad b \leftarrow 0$，训练集中选取数据$\left(x_{i}, y_{i}\right)$，如果$y_{i}\left(\sum_{j=1}^{N} \alpha_{j} y_{j} x_{j} \cdot x_{i}+b\right) \leqslant 0$<br>则 $\alpha_{i} \leftarrow \alpha_{i}+\eta$，$b \leftarrow b+\eta y_{i}$</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>统计学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法第一章学习笔记</title>
    <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-统计学习"><a href="#1-统计学习" class="headerlink" title="1.统计学习"></a>1.统计学习</h2><h3 id="1-1特点"><a href="#1-1特点" class="headerlink" title="1.1特点"></a>1.1特点</h3><ul>
<li>建立于计算机及网络之上</li>
<li>数据驱动</li>
<li>目的：对数据进行预测及分析</li>
<li>以方法为中心</li>
<li>综合概率论、统计学、信息论、计算理论、最优化理论及计算机科学</li>
</ul>
<blockquote>
<p>统计学习就是计算机系统通过运用数据及统计方法提高系统性能的机器学习。</p>
</blockquote>
<h3 id="1-2对象"><a href="#1-2对象" class="headerlink" title="1.2对象"></a>1.2对象</h3><p> 统计学习对象：数据<br> <strong>基本假设：</strong> 同类数据具有一定的统计规律性</p>
<h3 id="1-3目的"><a href="#1-3目的" class="headerlink" title="1.3目的"></a>1.3目的</h3><p> 对<strong>新数据</strong>进行预测和分析</p>
<h3 id="1-4方法"><a href="#1-4方法" class="headerlink" title="1.4方法"></a>1.4方法</h3><p>常用方法：</p>
<ul>
<li>监督学习（supervised learning）</li>
<li>非监督学习（unsupervised learning）</li>
<li>半监督学习（semi-supervised learning）</li>
<li>强化学习（reinforcement learning）</li>
</ul>
<p>三要素：</p>
<ul>
<li>模型（model）</li>
<li>策略（strategy）</li>
<li>算法（algorithm）</li>
</ul>
<p>主要步骤：</p>
<ol>
<li>得到一个有限训练数据集</li>
<li>确定包含所有可能模型的假设空间（学习模型的集合）</li>
<li>确定模型选择的准则（学习策略）</li>
<li>实现求解最优模型的算法（学习算法）</li>
<li>通过学习算法选择最优模型</li>
<li>对新数据进行预测和分析</li>
</ol>
<h2 id="2监督学习基本概念"><a href="#2监督学习基本概念" class="headerlink" title="2监督学习基本概念"></a>2监督学习基本概念</h2><h3 id="2-1输入空间、特征空间、输出空间"><a href="#2-1输入空间、特征空间、输出空间" class="headerlink" title="2.1输入空间、特征空间、输出空间"></a>2.1输入空间、特征空间、输出空间</h3><ul>
<li>输入空间：输入的所有可能取值</li>
<li>输出空间：输出的所有可能取值</li>
<li>特征空间：所有特征向量存在空间</li>
<li>特征向量：表示具体的实例</li>
</ul>
<h3 id="2-2联合概率分布"><a href="#2-2联合概率分布" class="headerlink" title="2.2联合概率分布"></a>2.2联合概率分布</h3><p>监督学习假设输入与输出的随机变量X和Y遵循联合概率分布P(X,Y)  （基本假设）</p>
<h3 id="2-3假设空间"><a href="#2-3假设空间" class="headerlink" title="2.3假设空间"></a>2.3假设空间</h3><p>假设空间：输入空间到输出空间的映射的集合</p>
<h2 id="3-统计学习三要素"><a href="#3-统计学习三要素" class="headerlink" title="3 统计学习三要素"></a>3 统计学习三要素</h2><p>方法=模型+策略+算法</p>
<h3 id="3-1模型"><a href="#3-1模型" class="headerlink" title="3.1模型"></a>3.1模型</h3><p><strong>假设空间$\mathcal{F}$</strong></p>
<p>1）假设空间定义为<strong>决策函数</strong>的集合（非概率模型）</p>
<p>$\mathcal{F}=\{f|Y=f(X)\}$</p>
<p>X/Y：定义在输入空间$\mathcal{X}$和输出空间$\mathcal{Y}$上的随机变量，<br>此时$\mathcal{F}$通常是由一个参数向量决定的函数族：</p>
<p>$\mathcal{F}=\{f|Y=f_\theta(X),\theta \in R^n\}$</p>
<p>2）假设空间定义为<strong>条件概率</strong>的集合（概率模型）</p>
<p>$\mathcal{F}=\{P|P(X,Y)\}$</p>
<p>X/Y：定义在输入空间$\mathcal{X}$和输出空间$\mathcal{Y}$上的随机变量，<br>此时$\mathcal{F}$通常是由一个参数向量决定的条件概率分布族：</p>
<p>$\mathcal{F}=\{P|P_\theta(X,Y),\theta \in R^n\}$</p>
<h3 id="3-2策略"><a href="#3-2策略" class="headerlink" title="3.2策略"></a>3.2策略</h3><p>1）损失函数、风险函数<br>损失函数（代价函数）L(Y,f(X))：度量预测错误的程度，为f(X)和Y的非负实值函数</p>
<p>常用损失函数：</p>
<ul>
<li>0-1损失函数<br>$L(Y, f(X))=\left\{\begin{array}{ll}{1,} &amp; {Y \neq f(X)} \\ {0,} &amp; {Y=f(X)}\end{array}\right.$</li>
<li>平方损失函数<br>$L(Y, f(X))=(Y-f(X))^{2}$</li>
<li>绝对损失函数<br>$L(Y, f(X))=|Y-f(X)|$</li>
<li>对数损失函数/对数似然损失函数<br>$L(Y, P(Y | X))=-\log P(Y | X)$</li>
</ul>
<p>风险函数/期望损失$R_{\mathrm{exp}}(f)$：损失函数的期望<br>$R_{\mathrm{exp}}(f)=E_{P}[L(Y, f(X))]=\int_{\mathcal{X}\times\mathcal{Y}} L(y, f(x)) P(x, y) \mathrm{d} x \mathrm{d} y$</p>
<p>经验风险/经验损失$R_{\mathrm{emp}}(f)$：f(X)关于训练数据集的平均损失<br>$R_{\mathrm{emp}}(f)=\frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)$</p>
<p>当N趋于无穷，经验风险$R_{\mathrm{emp}}(f)$趋于期望风险$R_{\mathrm{exp}}(f)$。</p>
<p>2）经验风险最小化与结构风险最小化</p>
<p><strong>经验风险最小化</strong>：经验风险最小的模型即为最优模型，求解如下最优化问题：</p>
<p>$\min _{f \in \mathcal{F}} \frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)$</p>
<p>注意点：</p>
<ul>
<li>样本容量大效果好，如极大似然估计</li>
<li>样本容量小有可能产生“过拟合”现象</li>
</ul>
<p><strong>结构风险最小化</strong>：等价于正则化，防止过拟合。在经验风险上加上正则化项或罚项。</p>
<p>结构风险：$R_{sm}(f)=\frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)+\lambda J(f)$</p>
<p>注意点：</p>
<ul>
<li>结构风险小需要经验风险与模型复杂度同时小</li>
<li>结构风险小对训练数据和测试数据都有较好的预测，如最大后验概率估计</li>
</ul>
<h3 id="3-3算法"><a href="#3-3算法" class="headerlink" title="3.3算法"></a>3.3算法</h3><p>学习模型的具体计算方法，也即求解最优化问题的算法</p>
<h2 id="4-模型评估与模型选择"><a href="#4-模型评估与模型选择" class="headerlink" title="4.模型评估与模型选择"></a>4.模型评估与模型选择</h2><h3 id="4-1-训练误差、测试误差"><a href="#4-1-训练误差、测试误差" class="headerlink" title="4.1 训练误差、测试误差"></a>4.1 训练误差、测试误差</h3><p>学习到的模型：$Y=\hat{f}(X)$</p>
<p>训练误差$R_{\mathrm{emp}}(\hat{f})$：模型$Y=\hat{f}(X)$关于训练集的平均损失：<br>$R_{\mathrm{emp}}(\hat{f})=\frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, \hat{f}\left(x_{i}\right)\right)$</p>
<p>测试误差$e_{\mathrm{test}}$：模型$Y=\hat{f}(X)$关于测试集的平均损失：<br>$e_{\mathrm{test}}=\frac{1}{N^{\prime}} \sum_{i=1}^{N^{\prime}} L\left(y_{i}, \hat{f}\left(x_{i}\right)\right)$</p>
<h3 id="4-2-模型选择"><a href="#4-2-模型选择" class="headerlink" title="4.2 模型选择"></a>4.2 模型选择</h3><p>避免出现过拟合并提高模型的预测能力</p>
<div align="center">    
<img src="/机器学习/统计学习方法/统计学习方法第一章学习笔记/M次多项式函数拟合问题.png" width="500" height="300" alt="图片名称" align="center">
<p>M次多项式函数拟合问题</p>
</div>

<div align="center">    
<img src="/机器学习/统计学习方法/统计学习方法第一章学习笔记/训练误差和测试误差与模型复杂度的关系.png" width="500" height="300" alt="图片名称" align="center">
<p>训练误差和测试误差与模型复杂度的关系</p>
</div>

<h2 id="5-正则化与交叉验证"><a href="#5-正则化与交叉验证" class="headerlink" title="5.正则化与交叉验证"></a>5.正则化与交叉验证</h2><h3 id="5-1-正则化"><a href="#5-1-正则化" class="headerlink" title="5.1 正则化"></a>5.1 正则化</h3><p>正则化项一般为模型复杂度的单调递增函数，模型越复杂，正则化值越大。</p>
<p>一般形式：$\min _{f \in \mathcal{F}} \frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)+\lambda J(f)$</p>
<p>正则化项不同形式：<br>$L_2范数$：$L(w)=\frac{1}{N} \sum_{i=1}^{N}\left(f\left(x_{i} ; w\right)-y_{i}\right)^{2}+\frac{\lambda}{2}|w|^{2}_2$<br>$L_1范数$：$L(w)=\frac{1}{N} \sum_{i=1}^{N}\left(f\left(x_{i} ; w\right)-y_{i}\right)^{2}+\lambda|w|_{1}$</p>
<ul>
<li>函数的p范数：$|w|_p=(\sum_{i=1}^{N}|x_i|^p)^{\frac{1}{p}}$ </li>
</ul>
<h3 id="5-2-交叉验证"><a href="#5-2-交叉验证" class="headerlink" title="5.2 交叉验证"></a>5.2 交叉验证</h3><p>1）简单交叉验证<br>随机将数据集分为两部分：训练集—测试集。</p>
<p>2）S折交叉验证<br>随机将数据切分成S个互不相交的同大小子集，训练集（S-1）—测试集（剩余子集）。</p>
<p>3）留一交叉验证<br>S折交叉验证特殊情形：S=N（N：数据集容量），缺乏数据情况下使用。</p>
<h2 id="6-泛化能力"><a href="#6-泛化能力" class="headerlink" title="6.泛化能力"></a>6.泛化能力</h2><p>学习到的模型：$Y=\hat{f}(X)$<br>泛化误差：$R_{\mathrm{exp}}(\hat{f})=E_{P}[L(Y, \hat{f}(X))]=\int_{\mathcal{X}\times\mathcal{Y}} L(y, \hat{f}(x)) P(x, y) \mathrm{d} x \mathrm{d} y$</p>
<h2 id="7-生成模型"><a href="#7-生成模型" class="headerlink" title="7.生成模型"></a>7.生成模型</h2><p>监督学习方法可分为生成方法和判别方法。</p>
<p>生成模型：朴素贝叶斯方法、隐马尔可夫模型<br>特点：</p>
<ul>
<li>可还原出联合概率分布P(X,Y)</li>
<li>学习收敛速度更快</li>
<li>存在隐变量，只能使用生成方法</li>
</ul>
<p>判别模型：k近邻法、感知机、决策树、逻辑斯蒂回归模型、最大熵模型、支持向量机、提升方法、条件随机场<br>特点：</p>
<ul>
<li>不可还原出联合概率分布P(X,Y)</li>
<li>学习准确率更高</li>
<li>可以简化学习问题</li>
</ul>
<h2 id="8-分类问题"><a href="#8-分类问题" class="headerlink" title="8.分类问题"></a>8.分类问题</h2><p>评价指标：分类准确率</p>
<p>二类问题常用评价指标：精确率、召回率<br>TP——将正类预测为正类数（正类：关注的类）<br>FN——将正类预测为负类数<br>FP——将负类预测为正类数<br>TN——将负类预测为负类数<br>精确率：$P=\frac{TP}{TP+FP}$<br>召回率：$R=\frac{TP}{TP+FN}$<br>$F_1$值：$\frac{2}{F_1}=\frac{1}{P}+\frac{1}{R}\quad\quad$$F_1=\frac{2TP}{2TP+FP+FN}$ （精确率、召回率的调和均值）</p>
<h2 id="9-标注问题"><a href="#9-标注问题" class="headerlink" title="9.标注问题"></a>9.标注问题</h2><p>输入：观测序列<br>输出：标记序列/状态序列<br>常用方法：隐马尔可夫模型、条件随机场</p>
<h2 id="10-回归问题"><a href="#10-回归问题" class="headerlink" title="10.回归问题"></a>10.回归问题</h2><p>回归模型：从输入变量到输出变量之间映射的函数，等价于函数拟合。<br>常用损失函数：平方损失函数，此时可由最小二乘法求解。</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>统计学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 项目精选</title>
    <url>/%E6%B1%87%E6%80%BB/GitHub%E9%A1%B9%E7%9B%AE%E7%B2%BE%E9%80%89/</url>
    <content><![CDATA[<p><img src="https://gitee.com/TommyMerlin/image-host-gitee/raw/master/pilot.jpg" alt><br><em>A collection of useful repositories.</em></p>
<p><a href="https://github.com/TommyMerlin/Repository-Collection" target="_blank" rel="noopener">GitHub</a> </p>
<hr>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ol>
<li><a href="https://github.com/apachecn/AiLearning" target="_blank" rel="noopener">apachecn / AiLearning</a><blockquote>
<p>AiLearning: 机器学习 - MachineLearning - ML、深度学习 - DeepLearning - DL、自然语言处理 NLP。<br>网站: <a href="http://ailearning.apachecn.org" target="_blank" rel="noopener">http://ailearning.apachecn.org</a></p>
</blockquote>
</li>
<li><a href="https://github.com/datawhalechina/pumpkin-book" target="_blank" rel="noopener">datawhalechina / pumpkin-book</a><blockquote>
<p>《机器学习》（西瓜书）公式推导解析，在线阅读地址：<a href="https://datawhalechina.github.io/pumpkin-book" target="_blank" rel="noopener">https://datawhalechina.github.io/pumpkin-book</a></p>
</blockquote>
</li>
<li><a href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener">scutan90 / DeepLearning-500-questions</a><blockquote>
<p>深度学习500问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述。</p>
</blockquote>
</li>
<li><a href="https://github.com/zergtant/pytorch-handbook" target="_blank" rel="noopener">zergtant / pytorch-handbook</a><blockquote>
<p>pytorch handbook是一本开源的书籍，目标是帮助那些希望和使用PyTorch进行深度学习开发和研究的朋友快速入门，其中包含的Pytorch教程全部通过测试保证可以成功运行。</p>
</blockquote>
</li>
<li><a href="https://github.com/fengdu78/lihang-code" target="_blank" rel="noopener">fengdu78 / lihang-code</a><blockquote>
<p>《统计学习方法》的代码实现。</p>
</blockquote>
</li>
<li><a href="https://github.com/MLEveryday/100-Days-Of-ML-Code" target="_blank" rel="noopener">MLEveryday / 100-Days-Of-ML-Code</a><blockquote>
<p>100-Days-Of-ML-Code中文版。</p>
</blockquote>
</li>
<li><a href="https://github.com/GokuMohandas/practicalAI" target="_blank" rel="noopener">GokuMohandas / practicalAI</a><blockquote>
<p>A practical approach to machine learning.</p>
</blockquote>
</li>
<li><a href="https://github.com/roboticcam/machine-learning-notes" target="_blank" rel="noopener">roboticcam/machine-learning-notes</a><blockquote>
<p>不间断更新机器学习，概率模型和深度学习的讲义(1000+页)和视频链接。</p>
</blockquote>
</li>
<li><a href="https://github.com/afshinea/stanford-cs-229-machine-learning" target="_blank" rel="noopener">afshinea / stanford-cs-229-machine-learning</a><blockquote>
<p>VIP cheatsheets for Stanford’s CS 229 Machine Learning.<br>网站: <a href="https://stanford.edu/~shervine/teaching/cs-229" target="_blank" rel="noopener">https://stanford.edu/~shervine/teaching/cs-229</a></p>
</blockquote>
</li>
<li><a href="https://github.com/fengdu78/deeplearning_ai_books" target="_blank" rel="noopener">fengdu78 / deeplearning_ai_books</a><blockquote>
<p>deeplearning.ai（吴恩达老师的深度学习课程笔记及资源）。</p>
</blockquote>
</li>
<li><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes" target="_blank" rel="noopener">fengdu78 / Coursera-ML-AndrewNg-Notes</a><blockquote>
<p>吴恩达老师的机器学习课程个人笔记。</p>
</blockquote>
</li>
<li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">tensorflow / tensorflow</a><blockquote>
<p>An Open Source Machine Learning Framework for Everyone.</p>
</blockquote>
</li>
<li><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener">d2l-ai / d2l-zh</a><blockquote>
<p>《动手学深度学习》：面向中文读者、能运行、可讨论。英文版即伯克利“深度学习导论（STAT 157）”教材。<br>视频：<a href="https://space.bilibili.com/209599371/channel/detail?cid=23541" target="_blank" rel="noopener">https://space.bilibili.com/209599371/channel/detail?cid=23541</a><br>PDF: <a href="https://github.com/TommyMerlin/Repository-Collection/tree/master/files" target="_blank" rel="noopener">https://github.com/TommyMerlin/Repository-Collection/tree/master/files</a></p>
</blockquote>
</li>
<li><a href="https://github.com/afshinea/stanford-cs-229-machine-learning" target="_blank" rel="noopener">afshinea / stanford-cs-229-machine-learning</a><blockquote>
<p>Cheatsheets for Stanford’s CS 229 Machine Learning.</p>
</blockquote>
</li>
<li><a href="https://github.com/microsoft/ai-edu" target="_blank" rel="noopener">microsoft / ai-edu</a><blockquote>
<p>AI education materials for Chinese students, teachers and IT professionals.</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ol>
<li><a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">jackfrued / Python-100-Days</a><blockquote>
<p>Python - 100天从新手到大师。</p>
</blockquote>
</li>
<li><a href="https://github.com/TheAlgorithms/Python" target="_blank" rel="noopener">TheAlgorithms / Python</a><blockquote>
<p>算法的Python实现。All Algorithms implemented in Python.</p>
</blockquote>
</li>
<li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">vinta / awesome-python</a><blockquote>
<p>A curated list of awesome Python frameworks, libraries, software and resources.<br>网站: <a href="https://awesome-python.com/" target="_blank" rel="noopener">https://awesome-python.com/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">fxsjy / jieba</a><blockquote>
<p>结巴中文分词。</p>
</blockquote>
</li>
<li><a href="https://github.com/lancopku/pkuseg-python" target="_blank" rel="noopener">lancopku / pkuseg-python</a><blockquote>
<p>pkuseg多领域中文分词工具。</p>
</blockquote>
</li>
<li><a href="https://github.com/fighting41love/funNLP" target="_blank" rel="noopener">fighting41love / funNLP</a><blockquote>
<p>中英文敏感词、语言检测、中外手机/电话归属地/运营商查询、名字推断性别、手机号抽取、身份证抽取、邮箱抽取、中日文人名库、中文缩写库、拆字词典、词汇情感值、停用词、反动词表、暴恐词表、繁简体转换、英文模拟中文发音、汪峰歌词生成器、职业名称词库、同义词库、反义词库、否定词库、汽车品牌词库、汽车零件词库、连续英文切割、各种中文词向量、公司名字大全、古诗词库、IT词库、财经词库、成语词库、地名词库、历史名人词库、诗词词库、医学词库、饮食词库、法律词库、汽车词库、动物词库、中文聊天语料、中文谣言数据、百度中文问答数据集、句子相似度匹配算法集合、bert资源、文本生成&amp;摘要相关工具、cocoNLP信息抽取工具、国内电话号码正则匹配</p>
</blockquote>
</li>
<li><a href="https://github.com/amueller/word_cloud" target="_blank" rel="noopener">amueller / word_cloud</a><blockquote>
<p>词云生成。A little word cloud generator in Python.<br>网站: <a href="https://amueller.github.io/word_cloud" target="_blank" rel="noopener">https://amueller.github.io/word_cloud</a></p>
</blockquote>
</li>
<li><a href="https://github.com/jakevdp/PythonDataScienceHandbook" target="_blank" rel="noopener">jakevdp / PythonDataScienceHandbook</a><blockquote>
<p>Python数据处理。Python Data Science Handbook: full text in Jupyter Notebooks.</p>
</blockquote>
</li>
<li><a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="noopener">xchaoinfo / fuck-login</a><blockquote>
<p>模拟登录一些知名的网站，为了方便爬取需要登录的网站。</p>
</blockquote>
</li>
<li><a href="https://github.com/fluentpython/example-code" target="_blank" rel="noopener">fluentpython / example-code</a><blockquote>
<p>《流畅的Python》书中代码。Example code for the book Fluent Python.</p>
</blockquote>
</li>
<li><a href="https://github.com/leisurelicht/wtfpython-cn" target="_blank" rel="noopener">leisurelicht / wtfpython-cn</a><blockquote>
<p>wtfpython的中文翻译。</p>
</blockquote>
</li>
<li><a href="https://github.com/qxf2/wtfiswronghere" target="_blank" rel="noopener">qxf2 / wtfiswronghere</a><blockquote>
<p>新手常犯的Python错误。<br>A collection of simple errors that beginners are likely to hit when they start writing Python.</p>
</blockquote>
</li>
<li><a href="https://github.com/rougier/matplotlib-cheatsheet" target="_blank" rel="noopener">rougier / matplotlib-cheatsheet</a><blockquote>
<p>Matplotlib 3.1 cheat sheet. From an upcoming book on matplotlib.</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="中国大学课程资源"><a href="#中国大学课程资源" class="headerlink" title="中国大学课程资源"></a>中国大学课程资源</h2><ol>
<li><a href="https://github.com/USTC-Resource/USTC-Course" target="_blank" rel="noopener">USTC-Resource / USTC-Course</a><blockquote>
<p>中国科学技术大学课程资源。<br>网站: <a href="https://ustc-resource.github.io/USTC-Course" target="_blank" rel="noopener">https://ustc-resource.github.io/USTC-Course</a></p>
</blockquote>
</li>
<li><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT" target="_blank" rel="noopener">PKUanonym / REKCARC-TSC-UHT</a><blockquote>
<p>清华大学计算机系课程攻略。</p>
</blockquote>
</li>
<li><a href="https://github.com/lib-pku/libpku" target="_blank" rel="noopener">lib-pku / libpku</a><blockquote>
<p>北京大学课程资料。<br>网站: <a href="https://lib-pku.github.io/" target="_blank" rel="noopener">https://lib-pku.github.io/</a> </p>
</blockquote>
</li>
<li><a href="https://github.com/QSCTech/zju-icicles" target="_blank" rel="noopener">QSCTech / zju-icicles</a><blockquote>
<p>浙江大学课程攻略共享计划。<br>网站: <a href="https://qsctech.github.io/zju-icicles/" target="_blank" rel="noopener">https://qsctech.github.io/zju-icicles/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/TheNetAdmin/zjuthesis" target="_blank" rel="noopener">TheNetAdmin / zjuthesis</a><blockquote>
<p>浙江大学毕业论文 Latex 模板。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="C-DOTNET"><a href="#C-DOTNET" class="headerlink" title="C# DOTNET"></a>C# DOTNET</h2><ol>
<li><a href="https://github.com/TheAlgorithms/C-Sharp" target="_blank" rel="noopener">TheAlgorithms / C-Sharp</a><blockquote>
<p>算法的C#实现。All algorithms implemented in C#.</p>
</blockquote>
</li>
<li><a href="https://github.com/Live-Charts/Live-Charts" target="_blank" rel="noopener">Live-Charts / Live-Charts</a><blockquote>
<p>.NET下简单、灵活、可交互的图表。<br>Simple, flexible, interactive &amp; powerful charts, maps and gauges for .Net.</p>
</blockquote>
</li>
<li><a href="https://github.com/0xd4d/dnSpy" target="_blank" rel="noopener">0xd4d / dnSpy</a><blockquote>
<p>.NET调试和编译器。.NET debugger and assembly editor.</p>
</blockquote>
</li>
<li><a href="https://github.com/shimat/opencvsharp" target="_blank" rel="noopener">shimat / opencvsharp</a><blockquote>
<p>.NET框架下的OpenCV。.NET Framework wrapper for OpenCV.</p>
</blockquote>
</li>
<li><a href="https://github.com/dathlin/HslCommunication" target="_blank" rel="noopener">dathlin / HslCommunication</a><blockquote>
<p>工业物联网基础架构框架，专注于基础技术通信和跨平台、跨语言通信功能，实现多种主流PLC数据读写。<br>网站: <a href="http://www.hslcommunication.cn" target="_blank" rel="noopener">http://www.hslcommunication.cn</a></p>
</blockquote>
</li>
<li><a href="https://github.com/quozd/awesome-dotnet" target="_blank" rel="noopener">quozd / awesome-dotnet</a><blockquote>
<p>A collection of awesome .NET libraries, tools, frameworks and software.</p>
</blockquote>
</li>
<li><a href="https://github.com/microsoft/dotnet" target="_blank" rel="noopener">microsoft / dotnet</a><blockquote>
<p>This repo is the official home of .NET on GitHub. It’s a great starting point to find many .NET OSS projects from Microsoft and the community, including many that are part of the .NET Foundation.</p>
</blockquote>
</li>
<li><a href="https://github.com/yuzhengyang/Fork" target="_blank" rel="noopener">yuzhengyang / Fork</a><blockquote>
<p>C#工具包，C#工具类，常用方法，系统API，文件处理、加密解密、Winform美化（C# Tools）。</p>
</blockquote>
</li>
<li><a href="https://github.com/Jimmey-Jiang/Common.Utility" target="_blank" rel="noopener">Jimmey-Jiang / Common.Utility</a><blockquote>
<p>比较全面的c#帮助类，各种功能性代码。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="WPF"><a href="#WPF" class="headerlink" title="WPF"></a>WPF</h2><ol>
<li><a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit" target="_blank" rel="noopener">MaterialDesignInXAML / MaterialDesignInXamlToolkit</a><blockquote>
<p>Google’s Material Design in XAML &amp; WPF, for C# &amp; VB.Net.<br>网站: <a href="http://materialdesigninxaml.net/" target="_blank" rel="noopener">http://materialdesigninxaml.net/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/MahApps/MahApps.Metro" target="_blank" rel="noopener">MahApps / MahApps.Metro</a><blockquote>
<p>A framework that allows developers to cobble together a Metro or Modern UI for their own WPF applications with minimal effort.<br>网站: <a href="https://mahapps.com" target="_blank" rel="noopener">https://mahapps.com</a></p>
</blockquote>
</li>
<li><a href="https://github.com/firstfloorsoftware/mui" target="_blank" rel="noopener">firstfloorsoftware / mui</a><blockquote>
<p>Modern UI for WPF.</p>
</blockquote>
</li>
<li><a href="https://github.com/xceedsoftware/wpftoolkit" target="_blank" rel="noopener">xceedsoftware / wpftoolkit</a><blockquote>
<p>All the controls missing in WPF. Over 1 million downloads.</p>
</blockquote>
</li>
<li><a href="https://github.com/microsoft/WPF-Samples" target="_blank" rel="noopener">microsoft / WPF-Samples</a><blockquote>
<p>Repository for WPF related samples.</p>
</blockquote>
</li>
<li><a href="https://github.com/Panuon/PanuonUI" target="_blank" rel="noopener">Panuon / PanuonUI</a><blockquote>
<p>一个好看精致、开源无限制使用的WPF控件库。</p>
</blockquote>
</li>
<li><a href="https://github.com/Panuon/PanuonUI.Silver" target="_blank" rel="noopener">Panuon / PanuonUI.Silver</a><blockquote>
<p>Panuon.UI optimized version. A beautiful wpf ui library using templates &amp; attached properties.</p>
</blockquote>
</li>
<li><a href="https://github.com/kwonganding/wpf.controls" target="_blank" rel="noopener">kwonganding / wpf.controls</a><blockquote>
<p>在学习中和使用WPF中，学习、借鉴了很多网友的文章和开源的项目的知识。发现提供实际项目开发需要的基础控件、样式的文章大都比较散，不成系列。因此基于现在项目中使用开发了一个wpf基础UI库。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="前端-博客"><a href="#前端-博客" class="headerlink" title="前端/博客"></a>前端/博客</h2><ol>
<li><a href="https://github.com/qiu-deqing/FE-learning" target="_blank" rel="noopener">qiu-deqing / FE-learning</a><blockquote>
<p>前端入门方法。</p>
</blockquote>
</li>
<li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next / hexo-theme-next</a><blockquote>
<p>Hexo主题。Elegant and powerful theme for Hexo.</p>
</blockquote>
</li>
<li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk / gitalk</a><blockquote>
<p>Gitalk is a modern comment component based on Github Issue and Preact.</p>
</blockquote>
</li>
<li><a href="https://github.com/helloqingfeng/Awsome-Front-End-learning-resource" target="_blank" rel="noopener">helloqingfeng / Awsome-Front-End-learning-resource</a><blockquote>
<p>GitHub最全的前端资源汇总仓库（包括前端学习、开发资源、求职面试等）。</p>
</blockquote>
</li>
<li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">kamranahmedse / developer-roadmap</a><blockquote>
<p>Roadmap to becoming a web developer in 2019.</p>
</blockquote>
</li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp6" target="_blank" rel="noopener">ProfessionalCSharp / ProfessionalCSharp6</a><blockquote>
<p>Code samples for the book Professional C# 6 and .NET Core 1.0, Wrox Press.</p>
</blockquote>
</li>
<li><a href="https://github.com/b3log/pipe" target="_blank" rel="noopener">b3log / pipe</a><blockquote>
<p>🎷 一款小而美的博客平台，专为程序员设计。</p>
</blockquote>
</li>
<li><a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener">pandao / editor.md</a><blockquote>
<p>开源可嵌入的在线Markdown编辑器（模块）。The open source embeddable online markdown editor (component).<br>网站: <a href="http://editor.md.ipandao.com/" target="_blank" rel="noopener">http://editor.md.ipandao.com/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">qianguyihao / Web</a><blockquote>
<p>前端入门和进阶学习笔记，超详细的Web前端学习图文教程。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="资源汇总"><a href="#资源汇总" class="headerlink" title="资源汇总"></a>资源汇总</h2><ol>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">sindresorhus / awesome</a><blockquote>
<p>Awesome lists about all kinds of interesting topics.</p>
</blockquote>
</li>
<li><a href="https://github.com/dipakkr/A-to-Z-Resources-for-Students" target="_blank" rel="noopener">dipakkr / A-to-Z-Resources-for-Students</a><blockquote>
<p>Curated list of resources for college students.</p>
</blockquote>
</li>
<li><a href="https://github.com/LisaDziuba/Awesome-Design-Tools" target="_blank" rel="noopener">LisaDziuba / Awesome-Design-Tools</a><blockquote>
<p>The best design tools for everything.</p>
</blockquote>
</li>
<li><a href="https://github.com/Solido/awesome-flutter" target="_blank" rel="noopener">Solido / awesome-flutter</a><blockquote>
<p>An awesome list that curates the best Flutter libraries, tools, tutorials, articles and more.</p>
</blockquote>
</li>
<li><a href="https://github.com/TonnyL/Awesome_APIs" target="_blank" rel="noopener">TonnyL / Awesome_APIs</a><blockquote>
<p>:octocat: A collection of APIs.</p>
</blockquote>
</li>
<li><a href="https://github.com/public-apis/public-apis" target="_blank" rel="noopener">public-apis / public-apis</a><blockquote>
<p>A collective list of free APIs for use in software and web development.</p>
</blockquote>
</li>
<li><a href="https://github.com/matiassingers/awesome-readme" target="_blank" rel="noopener">matiassingers / awesome-readme</a><blockquote>
<p>A curated list of awesome READMEs.</p>
</blockquote>
</li>
<li><a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener">ryanoasis / nerd-fonts</a><blockquote>
<p>图标、字体集合。🔡 Iconic font aggregator, collection, and patcher. 40+ patched fonts, over 3,600 glyph/icons, includes popular collections such as Font Awesome &amp; fonts such as Hack.</p>
</blockquote>
</li>
<li><a href="https://github.com/justjavac/awesome-wechat-weapp" target="_blank" rel="noopener">justjavac / awesome-wechat-weapp</a><blockquote>
<p>微信小程序开发资源汇总 💯</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="CS相关"><a href="#CS相关" class="headerlink" title="CS相关"></a>CS相关</h2><ol>
<li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">CyC2018 / CS-Notes</a><blockquote>
<p>📚 技术面试必备基础知识、Leetcode 题解、Java、C++、Python、后端面试、操作系统、计算机网络、系统设计。</p>
</blockquote>
</li>
<li><a href="https://github.com/prakhar1989/awesome-courses" target="_blank" rel="noopener">prakhar1989 / awesome-courses</a><blockquote>
<p>📚 大学CS课程。List of awesome university courses for learning Computer Science!</p>
</blockquote>
</li>
<li><a href="https://github.com/EbookFoundation/free-programming-books" target="_blank" rel="noopener">EbookFoundation / free-programming-books</a><blockquote>
<p>📚 编程相关书籍。Freely available programming books.</p>
</blockquote>
</li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">justjavac / free-programming-books-zh_CN</a><blockquote>
<p>📚 免费的计算机编程类中文书籍</p>
</blockquote>
</li>
<li><a href="https://github.com/ruanyf/free-books" target="_blank" rel="noopener">ruanyf / free-books</a><blockquote>
<p>互联网上的免费书籍。</p>
</blockquote>
</li>
<li><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">Snailclimb / JavaGuide</a><blockquote>
<p>【Java学习+面试指南】 一份涵盖大部分Java程序员所需要掌握的核心知识。</p>
</blockquote>
</li>
<li><a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noopener">protocolbuffers / protobuf</a><blockquote>
<p>Protocol Buffers - Google’s data interchange format.</p>
</blockquote>
</li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">geeeeeeeeek / git-recipes</a><blockquote>
<p>🥡 高质量的Git中文教程。Git recipes in Chinese by Zhongyi Tong.</p>
</blockquote>
</li>
<li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">github / gitignore</a><blockquote>
<p>A collection of useful .gitignore templates.</p>
</blockquote>
</li>
<li><a href="https://github.com/ziishaned/learn-regex" target="_blank" rel="noopener">ziishaned / learn-regex</a><blockquote>
<p>学习正则表达式。Learn regex the easy way.</p>
</blockquote>
</li>
<li><a href="https://github.com/Lellansin/Cipher-examples" target="_blank" rel="noopener">Lellansin / Cipher-examples</a><blockquote>
<p>常见加密算法。</p>
</blockquote>
</li>
<li><a href="https://github.com/badges/shields" target="_blank" rel="noopener">badges / shields</a><blockquote>
<p>Concise, consistent, and legible badges in SVG and raster format.<br>网站: <a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="AGV"><a href="#AGV" class="headerlink" title="AGV"></a>AGV</h2><ol>
<li><a href="https://github.com/AtsushiSakai/PythonRobotics" target="_blank" rel="noopener">AtsushiSakai / PythonRobotics</a><blockquote>
<p>Python sample codes for robotics algorithms.</p>
</blockquote>
</li>
<li><a href="https://github.com/anvaka/ngraph.path" target="_blank" rel="noopener">anvaka / ngraph.path</a><blockquote>
<p>Path finding in a graph.</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="有趣项目"><a href="#有趣项目" class="headerlink" title="有趣项目"></a>有趣项目</h2><ol>
<li><a href="https://github.com/chrislgarry/Apollo-11" target="_blank" rel="noopener">chrislgarry / Apollo-11</a><blockquote>
<p>阿波罗11号。Original Apollo 11 Guidance Computer (AGC) source code for the command and lunar modules.</p>
</blockquote>
</li>
<li><a href="https://github.com/hakimel/reveal.js" target="_blank" rel="noopener">hakimel / reveal.js</a><blockquote>
<p>The HTML Presentation Framework.</p>
</blockquote>
</li>
<li><a href="https://github.com/VincentSit/ChinaMobilePhoneNumberRegex" target="_blank" rel="noopener">VincentSit / ChinaMobilePhoneNumberRegex</a><blockquote>
<p> 一组匹配中国大陆手机号码的正则表达式。<br>Regular expressions that match the mobile phone number in mainland China.</p>
</blockquote>
</li>
<li><a href="https://github.com/Jannchie/Historical-ranking-data-visualization-based-on-d3.js" target="_blank" rel="noopener">Jannchie / Historical-ranking-data-visualization-based-on-d3.js</a><blockquote>
<p>这是一个数据可视化项目，能够将历史数据排名转化为动态柱状图图表。</p>
</blockquote>
</li>
<li><a href="https://github.com/pomber/git-history" target="_blank" rel="noopener">pomber / git-history</a><blockquote>
<p>可视化浏览commit历史。Quickly browse the history of a file from any git repository.<br>网站: <a href="https://githistory.xyz/" target="_blank" rel="noopener">https://githistory.xyz/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/leon-ai/leon" target="_blank" rel="noopener">leon-ai / leon</a><blockquote>
<p>Leon is your open-source personal assistant.</p>
</blockquote>
</li>
<li><a href="https://github.com/lennylxx/ipv6-hosts" target="_blank" rel="noopener">lennylxx / ipv6-hosts</a><blockquote>
<p>Fork of <a href="https://code.google.com/archive/p/ipv6-hosts/" target="_blank" rel="noopener">https://code.google.com/archive/p/ipv6-hosts/</a>, focusing on automation.</p>
</blockquote>
</li>
<li><a href="https://github.com/chinese-poetry/chinese-poetry" target="_blank" rel="noopener">chinese-poetry / chinese-poetry</a><blockquote>
<p>最全中华古诗词数据库, 唐宋两朝近一万四千古诗人, 接近5.5万首唐诗加26万宋诗. 两宋时期1564位词人，21050首词。</p>
</blockquote>
</li>
<li><a href="https://github.com/JustArchiNET/ArchiSteamFarm" target="_blank" rel="noopener">JustArchiNET / ArchiSteamFarm</a><blockquote>
<p>Steam挂卡。C# application with primary purpose of idling Steam cards from multiple accounts simultaneously.</p>
</blockquote>
</li>
<li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">soimort / you-get</a><blockquote>
<p>Dumb downloader that scrapes the web.</p>
</blockquote>
</li>
<li><a href="https://github.com/houshanren/hangzhou_house_knowledge" target="_blank" rel="noopener">houshanren / hangzhou_house_knowledge</a><blockquote>
<p>2017年买房经历总结出来的买房购房知识分享给大家，希望对大家有所帮助。买房不易，且买且珍惜。</p>
</blockquote>
</li>
<li><a href="https://github.com/komeiji-satori/Dress" target="_blank" rel="noopener">komeiji-satori / Dress</a><blockquote>
<p>好耶 是女装。</p>
</blockquote>
</li>
<li><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">XX-net / XX-Net</a><blockquote>
<p>A web proxy tool.</p>
</blockquote>
</li>
<li><a href="https://github.com/Aniket965/Hello-world" target="_blank" rel="noopener">Aniket965 / Hello-world</a><blockquote>
<p>Add any Program in any language you like or add a hello world Program ❣️ if you like give us ⭐️.</p>
</blockquote>
</li>
<li><a href="https://github.com/rwv/chinese-dos-games" target="_blank" rel="noopener">rwv / chinese-dos-games</a><blockquote>
<p>🎮 Chinese DOS games in browser.</p>
</blockquote>
</li>
<li><a href="https://github.com/gelstudios/gitfiti" target="_blank" rel="noopener">gelstudios / gitfiti</a><blockquote>
<p>随意更改commit历史。Abusing github commit history for the lulz.</p>
</blockquote>
</li>
<li><a href="https://github.com/ornicar/lila" target="_blank" rel="noopener">ornicar / lila</a><blockquote>
<p>国际象棋。♞ lichess.org: the forever free, adless and open source chess server. ♞</p>
</blockquote>
</li>
<li><a href="https://github.com/cmiscm/leonsans" target="_blank" rel="noopener">cmiscm / leonsans</a><blockquote>
<p>代码生成的字体。Leon Sans is a geometric sans-serif typeface made with code in 2019 by Jongmin Kim.<br>网站: <a href="https://leon-kim.com/" target="_blank" rel="noopener">https://leon-kim.com/</a></p>
</blockquote>
</li>
<li><a href="https://github.com/menzi11/BullshitGenerator" target="_blank" rel="noopener">menzi11 / BullshitGenerator</a><blockquote>
<p>狗屁不通文章生成器。Needs to generate some texts to test if my GUI rendering codes good or not. so I made this.<br>网站: <a href="https://suulnnka.github.io/BullshitGenerator/index.html" target="_blank" rel="noopener">https://suulnnka.github.io/BullshitGenerator/index.html</a></p>
</blockquote>
</li>
<li><a href="https://github.com/3b1b/manim" target="_blank" rel="noopener">3b1b / manim</a><blockquote>
<p>数学动画引擎。Animation engine for explanatory math videos.</p>
</blockquote>
</li>
<li><a href="https://github.com/carloscuesta/gitmoji" target="_blank" rel="noopener">carloscuesta / gitmoji</a><blockquote>
<p>在commit信息中添加emoji。An emoji guide for your commit messages. 😜<br>网站: <a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">https://gitmoji.carloscuesta.me/</a></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建个人博客网站美化</title>
    <url>/%E6%95%99%E7%A8%8B/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>上一篇我们讲了个人博客网站的搭建和部署问题，这一篇我们来讲讲博客网站的美化。还是以 Next 主题为例，打开 <code>themes\next</code> 文件夹下的 <code>_config.yml</code> <strong>(注意不是根目录下的 <code>_config.yml</code> 文件)</strong>，这个文件就是 Next 主题的配置文件，在其中可以修改和主题相关的配置选项，模拟人生4 2019.05.22 Origin正版备份</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub 搭建个人博客</title>
    <url>/%E6%95%99%E7%A8%8B/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<div align="center">
    <img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-1.jpg" width="85%">
</div>

<p>对于程序员来说，搭建和维护一个个人博客十分必要​，写博客既是对所学知识的整理和总结，同时也能向他人展现自己的学习成果。这篇教程就是基于 Hexo 和 GitHub 来搭建属于自己的个人博客，简单快捷，对小白也十分友好。</p>
<hr>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>本次Hexo博客搭建环境</p>
<blockquote>
<p>Windows 10  1803<br>node-v10.14.1<br>git version 2.21.0.windows.1<br>hexo-v3.8.0</p>
</blockquote>
<p>安装各种依赖环境还是比较简单的，基本上就是从各自的官网下载进行安装，十分方便。</p>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Hexo 的运行需要 Node.js 的支持，所以我们需要首先安装好 Node.js 。打开<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>就能很明显地看到下载提示，点击左边的按钮进行下载即可。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-2.jpg" width="75%"></p>
<p><strong>下载完点击安装程序进行安装，无需修改安装路径的话无脑点击下一步即可。</strong><br>当安装完成后打开命令行工具（cmd/powershell)，输入<code>node -v</code>，如果输出如下信息，安装即为成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v10.14.1</span><br></pre></td></tr></table></figure>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>我们需要从 GitHub 上下载主题文件，最重要的是我们需要将本地的博客部署到可供外部访问的网页上去，我们借助的是 GitHub ，这些都离不开 Git 的支持。同样的我们到 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载页</a>下载即可。这里我们选择 Windows 64 位最新版本的 Git for Windows 进行安装。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-3.jpg" width="90%/"></p>
<p><strong>安装和 Node.js 差不多，不做修改的话一直点下一步即可。</strong><br>安装完成后同样打开命令行工具（cmd/powershell)，输入<code>git --version</code>，如果输出如下信息，安装即为成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装完 Git 后，我们的操作就可以在 Git Bash 中进行<strong>(当然在其他命令行工具中也行)</strong>，在资源管理的任意目录下右键鼠标可以看到 Git Bash Here 选项。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-4.jpg" width="30%/"></p>
<p>单击该选项，我们便进入了 Git 的命令行工具界面如下(同样打开Windows自带的cmd或是其他命令行工具都可以)，之后 Hexo 的安装、博客的部署等操作都在这个界面进行。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-5.jpg" width="75%/"></p>
<p>由于国内的 npm 访问外网下载速度较慢，我们可以将 npm 源更换为淘宝的镜像（当然如果你觉得你的下载速度较快的话，也可以选择不进行更换），在 Git Bash 中输入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><strong>请注意如果进行了上述操作，那么之后的下载等操作需要使用到 npm 的地方你都应该更换为 cnpm 指令，这样才能起到加速作用，如果未进行更换，则使用 npm 即可。</strong></p>
<p>接下来就是重头戏<strong>安装 Hexo </strong>了。输入如下指令即可安装完成 Hexo 的安装，十分方便。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>在安装过程中可能会出现<code>WARN</code>提示，这是因为 Hexo 的某些内容不支持 Windows 系统，我们无需理会 <del>(程序员只关心 Error，不关心 Warning🙃)</del>。</p>
<p>安装完成后，我们输入 <code>hexo -v</code> 命令，如果显示如下信息，则安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.17134 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.14.1</span><br><span class="line">v8: 6.8.275.32-node.36</span><br><span class="line">uv: 1.23.2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>底下还有许多包的版本信息，可以看到 Hexo 的依赖项还是比较多的。</p>
<hr>
<h1 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h1><p>在我们想要存放博客文件的盘下进入 Git Bash ，首先我们要新建一个文件夹用来存放我们写的博客和其它相关文件，在命令行中输入<code>mkdir Blog</code> 命令，便可新建一个名称为 Blog 的文件夹（文件夹名可自取）。接下来进入刚创建的文件夹，可使用 <code>cd Blog</code> 命令，或是进入该文件夹后在空白处单击右键，再点击 Git Bash Here （还是多练习以下命令行的简单命令为好）。</p>
<p>进入 Blog 文件夹后，输入 <code>hexo init</code> 命令，即可完成该文件夹的初始化，在此期间，Hexo 会自动克隆和创建一系列相关文件，在结束后为得到如下反馈：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">INFO  Cloning hexo-starter to F:\desktop\Blog</span><br><span class="line">Cloning into <span class="string">'F:\desktop\Blog'</span>...</span><br><span class="line">...</span><br><span class="line">Unpacking objects: 100% (71/71), <span class="keyword">done</span>.</span><br><span class="line">Submodule <span class="string">'themes/landscape'</span> (https://github.com/hexojs/hexo-theme-landscape.git) registered <span class="keyword">for</span> path <span class="string">'themes/landscape'</span></span><br><span class="line">Cloning into <span class="string">'F:/desktop/Blog/themes/landscape'</span>...</span><br><span class="line">...</span><br><span class="line">Receiving objects: 100% (890/890), 2.56 MiB | 362.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (465/465), <span class="keyword">done</span>.</span><br><span class="line">Submodule path <span class="string">'themes/landscape'</span>: checked out <span class="string">'73a23c51f8487cfcd7c6deec96ccc7543960d350'</span></span><br><span class="line">INFO  Install dependencies</span><br><span class="line">...</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>
<p>当看到 <code>Start blogging with Hexo</code> 就知道我们已经初始化成功了，Blog 文件夹中会创建如下文件：</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-6.jpg" width="80%/"></p>
<hr>
<h1 id="生成博客页面"><a href="#生成博客页面" class="headerlink" title="生成博客页面"></a>生成博客页面</h1><p>在 \source\_posts\ 文件夹中就保存着我们写的所有博客，当前我们并没有写任何博客，但是 Hexo 为自动生成一个 hello-world.md 文件，我们可以以此为例，看看我们的博客网页是啥样啦。</p>
<p>在 Git Bash 中输入 <code>hexo g</code> 命令（是 <code>hexo generate</code> 的简写），等待 Hexo 自动生成网页，得到如下反馈则生成成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 192 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">...</span><br><span class="line">INFO  28 files generated <span class="keyword">in</span> 459 ms</span><br></pre></td></tr></table></figure>
<p>接下来我们需要开启开启本地服务器，输入 <code>hexo s</code> 命令（是 <code>hexo server</code> 的简写），输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>我们就知道了网页运行在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 上，我们在浏览器中输入该地址便能进入我们创建的博客网页啦。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-7.jpg" width="85%"></p>
<hr>
<h1 id="美化博客页面"><a href="#美化博客页面" class="headerlink" title="美化博客页面"></a>美化博客页面</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>可以看到打开的博客页面就是 Hexo 默认的页面，所以并不是非常得好看，我们可以自行选择更换，在 GitHub 上搜索 Hexo 主题还是有非常多的项目的。我在这里选择了目前使用人数比较多的 Next 主题进行演示。Next 主题的 Github 地址是 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next/hexotheme-next</a>。回到我们存放博客文件的根目录，输入如下指令，将该仓库克隆到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>这样我们就将 Next 主题克隆到 themes/next 文件夹下啦。</p>
<h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><p>使用编辑器打开根目录下的 <code>_config.yml</code> 文件，这个文件保存的就是 Hexo 的诸多配置项，我们可以对其进行个性化修改。在文件中找到 <code>theme</code> 配置选项，如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure>
<p>可以看到现在的主题是默认的 <code>landscape</code> ，我们将其改为 <code>next</code> 即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>再在 Git Bash 中依次输入下面三条指令（发布三连），<strong>请注意所有的 hexo 指令都是在根目录下进行的，如果当前目录不是根目录，必须先切换到根目录再执行命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean   <span class="comment">#清除之前生成的网站文件</span></span><br><span class="line">$ hexo g       <span class="comment">#生成当前网站文件</span></span><br><span class="line">$ hexo s       <span class="comment">#开启服务器</span></span><br></pre></td></tr></table></figure>
<p>再次打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，我们就能看到更换主题后的网站了，非常便捷。</p>
<p><img src="https://raw.githubusercontent.com/TommyMerlin/Image-Hosting/master/blog1-8.jpg" width="85%/"></p>
<p>这就是我们新生成的页面了，是不是看上去精致多了呢。</p>
<hr>
<h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h1><p>在完成了上述步骤之后，我们就可以在自己的电脑上打开博客网页了，但是怎么才能让别人也能访问到我们的网页呢？这就需要我们部署我们的博客网站了。幸运的是，GitHub 能为我们免费提供这一服务，那就是 GitHub Page ，我们需要做的就是在 GitHub 上新建一个名为 <code>&lt;username&gt;.github.io</code> (在<code>&lt;username&gt;</code>处填入你的用户名） 的仓库即可。</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>打开根目录下的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 选项，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure>
<p>将其修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>在其中的 <code>&lt;username&gt;</code> 处填入你的 GitHub 用户名即可。保存配置文件并退出。</p>
<p>接下来在 Git Bash 中输入下面三条指令（部署三连）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>至此，我们就已经完成了个人博客网站的部署，在浏览器中输入你的地址 ：<code>&lt;username&gt;.github.io</code> ，就能看到我们的个人网站啦！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>网站</tag>
        <tag>windows</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
